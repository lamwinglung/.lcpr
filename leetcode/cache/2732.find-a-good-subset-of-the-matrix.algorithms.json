{"id":2826,"fid":"2732","name":"找到矩阵中的好子集","slug":"find-a-good-subset-of-the-matrix","link":"https://leetcode.cn/problems/find-a-good-subset-of-the-matrix/description/","percent":55.0878255602665,"level":"Hard","category":"algorithms","en_name":"Find a Good Subset of the Matrix","cn_name":"找到矩阵中的好子集","totalAC":"5.4K","totalSubmit":"7.9K","likes":29,"dislikes":0,"desc":"<p>给你一个下标从 <strong>0</strong>&nbsp;开始大小为&nbsp;<code>m x n</code>&nbsp;的二进制矩阵&nbsp;<code>grid</code>&nbsp;。</p>\n\n<p>从原矩阵中选出若干行构成一个行的 <strong>非空&nbsp;</strong>子集，如果子集中任何一列的和至多为子集大小的一半，那么我们称这个子集是 <strong>好子集</strong>。</p>\n\n<p>更正式的，如果选出来的行子集大小（即行的数量）为 k，那么每一列的和至多为&nbsp;<code>floor(k / 2)</code>&nbsp;。</p>\n\n<p>请你返回一个整数数组，它包含好子集的行下标，请你将子集中的元素&nbsp;<b>升序</b>&nbsp;返回。</p>\n\n<p>如果有多个好子集，你可以返回任意一个。如果没有好子集，请你返回一个空数组。</p>\n\n<p>一个矩阵 <code>grid</code>&nbsp;的行 <strong>子集</strong> ，是删除 <code>grid</code>&nbsp;中某些（也可能不删除）行后，剩余行构成的元素集合。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>grid = [[0,1,1,0],[0,0,0,1],[1,1,1,1]]\n<b>输出：</b>[0,1]\n<b>解释：</b>我们可以选择第 0 和第 1 行构成一个好子集。\n选出来的子集大小为 2 。\n- 第 0&nbsp;列的和为 0 + 0 = 0 ，小于等于子集大小的一半。\n- 第 1&nbsp;列的和为 1 + 0 = 1 ，小于等于子集大小的一半。\n- 第 2&nbsp;列的和为 1 + 0 = 1 ，小于等于子集大小的一半。\n- 第 3&nbsp;列的和为 0 + 1 = 1 ，小于等于子集大小的一半。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>grid = [[0]]\n<b>输出：</b>[0]\n<strong>解释：</strong>我们可以选择第 0 行构成一个好子集。\n选出来的子集大小为 1 。\n- 第 0 列的和为 0 ，小于等于子集大小的一半。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>grid = [[1,1,1],[1,1,1]]\n<b>输出：</b>[]\n<b>解释：</b>没有办法得到一个好子集。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= n &lt;= 5</code></li>\n\t<li><code>grid[i][j]</code>&nbsp;要么是&nbsp;<code>0</code>&nbsp;，要么是&nbsp;<code>1</code> 。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> goodSubsetofBinaryMatrix(vector<vector<int>>& grid) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<Integer> goodSubsetofBinaryMatrix(int[][] grid) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def goodSubsetofBinaryMatrix(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def goodSubsetofBinaryMatrix(self, grid: List[List[int]]) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* goodSubsetofBinaryMatrix(int** grid, int gridSize, int* gridColSize, int* returnSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<int> GoodSubsetofBinaryMatrix(int[][] grid) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} grid\n * @return {number[]}\n */\nvar goodSubsetofBinaryMatrix = function(grid) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function goodSubsetofBinaryMatrix(grid: number[][]): number[] {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer[]\n     */\n    function goodSubsetofBinaryMatrix($grid) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func goodSubsetofBinaryMatrix(_ grid: [[Int]]) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun goodSubsetofBinaryMatrix(grid: Array<IntArray>): List<Int> {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> goodSubsetofBinaryMatrix(List<List<int>> grid) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func goodSubsetofBinaryMatrix(grid [][]int) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\n# @return {Integer[]}\ndef good_subsetof_binary_matrix(grid)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def goodSubsetofBinaryMatrix(grid: Array[Array[Int]]): List[Int] = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn good_subsetof_binary_matrix(grid: Vec<Vec<i32>>) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (good-subsetof-binary-matrix grid)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec good_subsetof_binary_matrix(Grid :: [[integer()]]) -> [integer()].\ngood_subsetof_binary_matrix(Grid) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec good_subsetof_binary_matrix(grid :: [[integer]]) :: [integer]\n  def good_subsetof_binary_matrix(grid) do\n\n  end\nend"}],"testcase":"[[0,1,1,0],[0,0,0,1],[1,1,1,1]]","testable":true,"templateMeta":{"name":"goodSubsetofBinaryMatrix","params":[{"name":"grid","type":"integer[][]"}],"return":{"type":"list<integer>"}}}
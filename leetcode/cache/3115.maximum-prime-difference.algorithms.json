{"id":3373,"fid":"3115","name":"质数的最大距离","slug":"maximum-prime-difference","link":"https://leetcode.cn/problems/maximum-prime-difference/description/","percent":58.702832549294364,"level":"Medium","category":"algorithms","en_name":"Maximum Prime Difference","cn_name":"质数的最大距离","totalAC":"12.2K","totalSubmit":"19.3K","likes":13,"dislikes":0,"desc":"<p>给你一个整数数组 <code>nums</code>。</p>\n\n<p>返回两个（不一定不同的）质数在 <code>nums</code> 中&nbsp;<strong>下标</strong> 的 <strong>最大距离</strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">nums = [4,2,9,5,3]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>解释：</strong> <code>nums[1]</code>、<code>nums[3]</code> 和 <code>nums[4]</code> 是质数。因此答案是 <code>|4 - 1| = 3</code>。</p>\n</div>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<div class=\"example-block\">\n<p><strong>输入：</strong> <span class=\"example-io\">nums = [4,8,2,8]</span></p>\n\n<p><strong>输出：</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>解释：</strong> <code>nums[2]</code> 是质数。因为只有一个质数，所以答案是 <code>|2 - 2| = 0</code>。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n\t<li>输入保证 <code>nums</code> 中至少有一个质数。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maximumPrimeDifference(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maximumPrimeDifference(int[] nums) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maximumPrimeDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maximumPrimeDifference(self, nums: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"int maximumPrimeDifference(int* nums, int numsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaximumPrimeDifference(int[] nums) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumPrimeDifference = function(nums) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function maximumPrimeDifference(nums: number[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumPrimeDifference($nums) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maximumPrimeDifference(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maximumPrimeDifference(nums: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int maximumPrimeDifference(List<int> nums) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func maximumPrimeDifference(nums []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_prime_difference(nums)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maximumPrimeDifference(nums: Array[Int]): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn maximum_prime_difference(nums: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (maximum-prime-difference nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec maximum_prime_difference(Nums :: [integer()]) -> integer().\nmaximum_prime_difference(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec maximum_prime_difference(nums :: [integer]) :: integer\n  def maximum_prime_difference(nums) do\n    \n  end\nend"}],"testcase":"[4,2,9,5,3]","testable":true,"templateMeta":{"name":"maximumPrimeDifference","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}
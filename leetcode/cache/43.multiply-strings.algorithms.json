{"id":43,"fid":"43","name":"字符串相乘","slug":"multiply-strings","link":"https://leetcode.cn/problems/multiply-strings/description/","percent":44.321553956685634,"level":"Medium","category":"algorithms","en_name":"Multiply Strings","cn_name":"字符串相乘","totalAC":"347.3K","totalSubmit":"783.1K","likes":1346,"dislikes":0,"desc":"<p>给定两个以字符串形式表示的非负整数&nbsp;<code>num1</code>&nbsp;和&nbsp;<code>num2</code>，返回&nbsp;<code>num1</code>&nbsp;和&nbsp;<code>num2</code>&nbsp;的乘积，它们的乘积也表示为字符串形式。</p>\n\n<p><strong>注意：</strong>不能使用任何内置的 BigInteger 库或直接将输入转换为整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> num1 = \"2\", num2 = \"3\"\n<strong>输出:</strong> \"6\"</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入:</strong> num1 = \"123\", num2 = \"456\"\n<strong>输出:</strong> \"56088\"</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1.length, num2.length &lt;= 200</code></li>\n\t<li><code>num1</code>&nbsp;和 <code>num2</code>&nbsp;只能由数字组成。</li>\n\t<li><code>num1</code>&nbsp;和 <code>num2</code>&nbsp;都不包含任何前导零，除了数字0本身。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string multiply(string num1, string num2) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String multiply(String num1, String num2) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def multiply(self, num1: str, num2: str) -> str:"},{"value":"c","text":"C","defaultCode":"char* multiply(char* num1, char* num2) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string Multiply(string num1, string num2) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar multiply = function(num1, num2) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function multiply(num1: string, num2: string): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $num1\n     * @param String $num2\n     * @return String\n     */\n    function multiply($num1, $num2) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func multiply(_ num1: String, _ num2: String) -> String {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun multiply(num1: String, num2: String): String {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String multiply(String num1, String num2) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func multiply(num1 string, num2 string) string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} num1\n# @param {String} num2\n# @return {String}\ndef multiply(num1, num2)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def multiply(num1: String, num2: String): String = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn multiply(num1: String, num2: String) -> String {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (multiply num1 num2)\n  (-> string? string? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec multiply(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmultiply(Num1, Num2) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec multiply(num1 :: String.t, num2 :: String.t) :: String.t\n  def multiply(num1, num2) do\n    \n  end\nend"}],"testcase":"\"2\"\n\"3\"","testable":true,"templateMeta":{"name":"multiply","params":[{"name":"num1","type":"string"},{"name":"num2","type":"string"}],"return":{"type":"string"}}}
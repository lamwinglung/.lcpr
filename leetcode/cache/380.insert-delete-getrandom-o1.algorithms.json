{"id":380,"fid":"380","name":"O(1) 时间插入、删除和获取随机元素","slug":"insert-delete-getrandom-o1","link":"https://leetcode.cn/problems/insert-delete-getrandom-o1/description/","percent":52.19509220959673,"level":"Medium","category":"algorithms","en_name":"Insert Delete GetRandom O(1)","cn_name":"O(1) 时间插入、删除和获取随机元素","totalAC":"165.9K","totalSubmit":"317.7K","likes":828,"dislikes":0,"desc":"<p>实现<code>RandomizedSet</code> 类：</p>\n\n<div class=\"original__bRMd\">\n<div>\n<ul>\n\t<li><code>RandomizedSet()</code> 初始化 <code>RandomizedSet</code> 对象</li>\n\t<li><code>bool insert(int val)</code> 当元素 <code>val</code> 不存在时，向集合中插入该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\n\t<li><code>bool remove(int val)</code> 当元素 <code>val</code> 存在时，从集合中移除该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\n\t<li><code>int getRandom()</code> 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 <strong>相同的概率</strong> 被返回。</li>\n</ul>\n\n<p>你必须实现类的所有函数，并满足每个函数的 <strong>平均</strong> 时间复杂度为 <code>O(1)</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入</strong>\n[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]\n<strong>输出</strong>\n[null, true, false, true, 2, true, false, 2]\n\n<strong>解释</strong>\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // 向集合中插入 1 。返回 true 表示 1 被成功地插入。\nrandomizedSet.remove(2); // 返回 false ，表示集合中不存在 2 。\nrandomizedSet.insert(2); // 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。\nrandomizedSet.getRandom(); // getRandom 应随机返回 1 或 2 。\nrandomizedSet.remove(1); // 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。\nrandomizedSet.insert(2); // 2 已在集合中，所以返回 false 。\nrandomizedSet.getRandom(); // 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>最多调用 <code>insert</code>、<code>remove</code> 和 <code>getRandom</code> 函数 <code>2 *&nbsp;</code><code>10<sup>5</sup></code> 次</li>\n\t<li>在调用 <code>getRandom</code> 方法时，数据结构中 <strong>至少存在一个</strong> 元素。</li>\n</ul>\n</div>\n</div>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class RandomizedSet {\npublic:\n    RandomizedSet() {\n\n    }\n    \n    bool insert(int val) {\n\n    }\n    \n    bool remove(int val) {\n\n    }\n    \n    int getRandom() {\n\n    }\n};\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet* obj = new RandomizedSet();\n * bool param_1 = obj->insert(val);\n * bool param_2 = obj->remove(val);\n * int param_3 = obj->getRandom();\n */"},{"value":"java","text":"Java","defaultCode":"class RandomizedSet {\n\n    public RandomizedSet() {\n\n    }\n    \n    public boolean insert(int val) {\n\n    }\n    \n    public boolean remove(int val) {\n\n    }\n    \n    public int getRandom() {\n\n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = new RandomizedSet();\n * boolean param_1 = obj.insert(val);\n * boolean param_2 = obj.remove(val);\n * int param_3 = obj.getRandom();\n */"},{"value":"python","text":"Python","defaultCode":"class RandomizedSet(object):\n\n    def __init__(self):\n\n\n    def insert(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: bool\n        \"\"\"\n\n\n    def remove(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: bool\n        \"\"\"\n\n\n    def getRandom(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n\n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()"},{"value":"python3","text":"Python3","defaultCode":"class RandomizedSet:\n\n    def __init__(self):\n\n\n    def insert(self, val: int) -> bool:\n\n\n    def remove(self, val: int) -> bool:\n\n\n    def getRandom(self) -> int:\n\n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()"},{"value":"c","text":"C","defaultCode":"\n\n\ntypedef struct {\n    \n} RandomizedSet;\n\n\nRandomizedSet* randomizedSetCreate() {\n    \n}\n\nbool randomizedSetInsert(RandomizedSet* obj, int val) {\n    \n}\n\nbool randomizedSetRemove(RandomizedSet* obj, int val) {\n    \n}\n\nint randomizedSetGetRandom(RandomizedSet* obj) {\n    \n}\n\nvoid randomizedSetFree(RandomizedSet* obj) {\n    \n}\n\n/**\n * Your RandomizedSet struct will be instantiated and called as such:\n * RandomizedSet* obj = randomizedSetCreate();\n * bool param_1 = randomizedSetInsert(obj, val);\n \n * bool param_2 = randomizedSetRemove(obj, val);\n \n * int param_3 = randomizedSetGetRandom(obj);\n \n * randomizedSetFree(obj);\n*/"},{"value":"csharp","text":"C#","defaultCode":"public class RandomizedSet {\n\n    public RandomizedSet() {\n\n    }\n    \n    public bool Insert(int val) {\n\n    }\n    \n    public bool Remove(int val) {\n\n    }\n    \n    public int GetRandom() {\n\n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = new RandomizedSet();\n * bool param_1 = obj.Insert(val);\n * bool param_2 = obj.Remove(val);\n * int param_3 = obj.GetRandom();\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"\nvar RandomizedSet = function() {\n\n};\n\n/** \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.insert = function(val) {\n\n};\n\n/** \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.remove = function(val) {\n\n};\n\n/**\n * @return {number}\n */\nRandomizedSet.prototype.getRandom = function() {\n\n};\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = new RandomizedSet()\n * var param_1 = obj.insert(val)\n * var param_2 = obj.remove(val)\n * var param_3 = obj.getRandom()\n */"},{"value":"typescript","text":"TypeScript","defaultCode":"class RandomizedSet {\n    constructor() {\n        \n    }\n\n    insert(val: number): boolean {\n        \n    }\n\n    remove(val: number): boolean {\n        \n    }\n\n    getRandom(): number {\n        \n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = new RandomizedSet()\n * var param_1 = obj.insert(val)\n * var param_2 = obj.remove(val)\n * var param_3 = obj.getRandom()\n */"},{"value":"php","text":"PHP","defaultCode":"class RandomizedSet {\n    /**\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * @param Integer $val\n     * @return Boolean\n     */\n    function insert($val) {\n\n    }\n\n    /**\n     * @param Integer $val\n     * @return Boolean\n     */\n    function remove($val) {\n\n    }\n\n    /**\n     * @return Integer\n     */\n    function getRandom() {\n\n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * $obj = RandomizedSet();\n * $ret_1 = $obj->insert($val);\n * $ret_2 = $obj->remove($val);\n * $ret_3 = $obj->getRandom();\n */"},{"value":"swift","text":"Swift","defaultCode":"\nclass RandomizedSet {\n\n    init() {\n\n    }\n    \n    func insert(_ val: Int) -> Bool {\n\n    }\n    \n    func remove(_ val: Int) -> Bool {\n\n    }\n    \n    func getRandom() -> Int {\n\n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * let obj = RandomizedSet()\n * let ret_1: Bool = obj.insert(val)\n * let ret_2: Bool = obj.remove(val)\n * let ret_3: Int = obj.getRandom()\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class RandomizedSet() {\n\n    fun insert(`val`: Int): Boolean {\n\n    }\n\n    fun remove(`val`: Int): Boolean {\n\n    }\n\n    fun getRandom(): Int {\n\n    }\n\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = RandomizedSet()\n * var param_1 = obj.insert(`val`)\n * var param_2 = obj.remove(`val`)\n * var param_3 = obj.getRandom()\n */"},{"value":"dart","text":"Dart","defaultCode":"class RandomizedSet {\n\n  RandomizedSet() {\n    \n  }\n  \n  bool insert(int val) {\n    \n  }\n  \n  bool remove(int val) {\n    \n  }\n  \n  int getRandom() {\n    \n  }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = RandomizedSet();\n * bool param1 = obj.insert(val);\n * bool param2 = obj.remove(val);\n * int param3 = obj.getRandom();\n */"},{"value":"golang","text":"Go","defaultCode":"type RandomizedSet struct {\n\n}\n\n\nfunc Constructor() RandomizedSet {\n\n}\n\n\nfunc (this *RandomizedSet) Insert(val int) bool {\n\n}\n\n\nfunc (this *RandomizedSet) Remove(val int) bool {\n\n}\n\n\nfunc (this *RandomizedSet) GetRandom() int {\n\n}\n\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Insert(val);\n * param_2 := obj.Remove(val);\n * param_3 := obj.GetRandom();\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class RandomizedSet\n    def initialize()\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Boolean\n=end\n    def insert(val)\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Boolean\n=end\n    def remove(val)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def get_random()\n        \n    end\n\n\nend\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet.new()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.get_random()"},{"value":"scala","text":"Scala","defaultCode":"class RandomizedSet() {\n\n    def insert(`val`: Int): Boolean = {\n        \n    }\n\n    def remove(`val`: Int): Boolean = {\n        \n    }\n\n    def getRandom(): Int = {\n        \n    }\n\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * val obj = new RandomizedSet()\n * val param_1 = obj.insert(`val`)\n * val param_2 = obj.remove(`val`)\n * val param_3 = obj.getRandom()\n */"},{"value":"rust","text":"Rust","defaultCode":"struct RandomizedSet {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl RandomizedSet {\n\n    fn new() -> Self {\n\n    }\n    \n    fn insert(&self, val: i32) -> bool {\n\n    }\n    \n    fn remove(&self, val: i32) -> bool {\n\n    }\n    \n    fn get_random(&self) -> i32 {\n\n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * let obj = RandomizedSet::new();\n * let ret_1: bool = obj.insert(val);\n * let ret_2: bool = obj.remove(val);\n * let ret_3: i32 = obj.get_random();\n */"},{"value":"racket","text":"Racket","defaultCode":"(define randomized-set%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; insert : exact-integer? -> boolean?\n    (define/public (insert val)\n      )\n    ; remove : exact-integer? -> boolean?\n    (define/public (remove val)\n      )\n    ; get-random : -> exact-integer?\n    (define/public (get-random)\n      )))\n\n;; Your randomized-set% object will be instantiated and called as such:\n;; (define obj (new randomized-set%))\n;; (define param_1 (send obj insert val))\n;; (define param_2 (send obj remove val))\n;; (define param_3 (send obj get-random))"},{"value":"erlang","text":"Erlang","defaultCode":"-spec randomized_set_init_() -> any().\nrandomized_set_init_() ->\n  .\n\n-spec randomized_set_insert(Val :: integer()) -> boolean().\nrandomized_set_insert(Val) ->\n  .\n\n-spec randomized_set_remove(Val :: integer()) -> boolean().\nrandomized_set_remove(Val) ->\n  .\n\n-spec randomized_set_get_random() -> integer().\nrandomized_set_get_random() ->\n  .\n\n\n%% Your functions will be called as such:\n%% randomized_set_init_(),\n%% Param_1 = randomized_set_insert(Val),\n%% Param_2 = randomized_set_remove(Val),\n%% Param_3 = randomized_set_get_random(),\n\n%% randomized_set_init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule RandomizedSet do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec insert(val :: integer) :: boolean\n  def insert(val) do\n    \n  end\n\n  @spec remove(val :: integer) :: boolean\n  def remove(val) do\n    \n  end\n\n  @spec get_random() :: integer\n  def get_random() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# RandomizedSet.init_()\n# param_1 = RandomizedSet.insert(val)\n# param_2 = RandomizedSet.remove(val)\n# param_3 = RandomizedSet.get_random()\n\n# RandomizedSet.init_ will be called before every test case, in which you can do some necessary initializations."}],"testcase":"[\"RandomizedSet\",\"insert\",\"remove\",\"insert\",\"getRandom\",\"remove\",\"insert\",\"getRandom\"]\n[[],[1],[2],[2],[],[1],[2],[]]","testable":true,"templateMeta":{"classname":"RandomizedSet","constructor":{"params":[]},"methods":[{"params":[{"type":"integer","name":"val"}],"name":"insert","return":{"type":"boolean"}},{"params":[{"type":"integer","name":"val"}],"return":{"type":"boolean"},"name":"remove"},{"params":[],"name":"getRandom","return":{"type":"integer"}}],"return":{"type":"boolean"},"systemdesign":true}}
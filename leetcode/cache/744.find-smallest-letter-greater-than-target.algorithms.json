{"id":745,"fid":"744","name":"寻找比目标字母大的最小字母","slug":"find-smallest-letter-greater-than-target","link":"https://leetcode.cn/problems/find-smallest-letter-greater-than-target/description/","percent":49.20355165997223,"level":"Easy","category":"algorithms","en_name":"Find Smallest Letter Greater Than Target","cn_name":"寻找比目标字母大的最小字母","totalAC":"126.1K","totalSubmit":"255.9K","likes":297,"dislikes":0,"desc":"<p>给你一个字符数组 <code>letters</code>，该数组按<strong>非递减顺序</strong>排序，以及一个字符 <code>target</code>。<code>letters</code>&nbsp;里<strong>至少有两个不同</strong>的字符。</p>\n\n<p>返回&nbsp;<code>letters</code>&nbsp;中大于 <code>target</code> 的最小的字符。如果不存在这样的字符，则返回&nbsp;<code>letters</code> 的第一个字符。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入: </strong>letters = [\"c\", \"f\", \"j\"]，target = \"a\"\n<strong>输出:</strong> \"c\"\n<strong>解释：</strong>letters 中字典上比 'a' 大的最小字符是 'c'。</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> letters = [\"c\",\"f\",\"j\"], target = \"c\"\n<strong>输出:</strong> \"f\"\n<strong>解释：</strong>letters 中字典顺序上大于 'c' 的最小字符是 'f'。</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> letters = [\"x\",\"x\",\"y\",\"y\"], target = \"z\"\n<strong>输出:</strong> \"x\"\n<strong>解释：</strong>letters 中没有一个字符在字典上大于 'z'，所以我们返回 letters[0]。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= letters.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>letters[i]</code>&nbsp;是一个小写字母</li>\n\t<li><code>letters</code> 按<strong>非递减顺序</strong>排序</li>\n\t<li><code>letters</code> 最少包含两个不同的字母</li>\n\t<li><code>target</code> 是一个小写字母</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    char nextGreatestLetter(vector<char>& letters, char target) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public char nextGreatestLetter(char[] letters, char target) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def nextGreatestLetter(self, letters, target):\n        \"\"\"\n        :type letters: List[str]\n        :type target: str\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def nextGreatestLetter(self, letters: List[str], target: str) -> str:"},{"value":"c","text":"C","defaultCode":"char nextGreatestLetter(char* letters, int lettersSize, char target) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public char NextGreatestLetter(char[] letters, char target) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {character[]} letters\n * @param {character} target\n * @return {character}\n */\nvar nextGreatestLetter = function(letters, target) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function nextGreatestLetter(letters: string[], target: string): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[] $letters\n     * @param String $target\n     * @return String\n     */\n    function nextGreatestLetter($letters, $target) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func nextGreatestLetter(_ letters: [Character], _ target: Character) -> Character {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun nextGreatestLetter(letters: CharArray, target: Char): Char {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String nextGreatestLetter(List<String> letters, String target) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func nextGreatestLetter(letters []byte, target byte) byte {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[]} letters\n# @param {Character} target\n# @return {Character}\ndef next_greatest_letter(letters, target)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def nextGreatestLetter(letters: Array[Char], target: Char): Char = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn next_greatest_letter(letters: Vec<char>, target: char) -> char {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (next-greatest-letter letters target)\n  (-> (listof char?) char? char?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec next_greatest_letter(Letters :: [char()], Target :: char()) -> char().\nnext_greatest_letter(Letters, Target) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec next_greatest_letter(letters :: [char], target :: char) :: char\n  def next_greatest_letter(letters, target) do\n    \n  end\nend"}],"testcase":"[\"c\",\"f\",\"j\"]\n\"a\"","testable":true,"templateMeta":{"name":"nextGreatestLetter","params":[{"name":"letters","type":"character[]"},{"name":"target","type":"character"}],"return":{"type":"character"}}}
{"id":1000476,"fid":"LCP 61","name":"气温变化趋势","slug":"6CE719","link":"https://leetcode.cn/problems/6CE719/description/","percent":61.62584309549166,"level":"Easy","category":"algorithms","en_name":"气温变化趋势","cn_name":"气温变化趋势","totalAC":"20.1K","totalSubmit":"29.1K","likes":26,"dislikes":0,"desc":"力扣城计划在两地设立「力扣嘉年华」的分会场，气象小组正在分析两地区的气温变化趋势，对于第 `i ~ (i+1)` 天的气温变化趋势，将根据以下规则判断：\n- 若第 `i+1` 天的气温 **高于** 第 `i` 天，为 **上升** 趋势\n- 若第 `i+1` 天的气温 **等于** 第 `i` 天，为 **平稳** 趋势\n- 若第 `i+1` 天的气温 **低于** 第 `i` 天，为 **下降** 趋势\n\n已知 `temperatureA[i]` 和 `temperatureB[i]` 分别表示第 `i` 天两地区的气温。\n组委会希望找到一段天数尽可能多，且两地气温变化趋势相同的时间举办嘉年华活动。请分析并返回两地气温变化趋势**相同的最大连续天数**。\n> 即最大的 `n`，使得第 `i~i+n` 天之间，两地气温变化趋势相同\n\n**示例 1：**\n>输入：\n>`temperatureA = [21,18,18,18,31]`\n>`temperatureB = [34,32,16,16,17]`\n>\n>输出：`2`\n>\n>解释：如下表所示， 第 `2～4` 天两地气温变化趋势相同，且持续时间最长，因此返回 `4-2=2`\n![image.png](https://pic.leetcode-cn.com/1663902654-hlrSvs-image.png){:width=1000px}\n\n\n**示例 2：**\n>输入：\n>`temperatureA = [5,10,16,-6,15,11,3]`\n>`temperatureB = [16,22,23,23,25,3,-16]`\n>\n>输出：`3`\n\n**提示：**\n- `2 <= temperatureA.length == temperatureB.length <= 1000`\n- `-20 <= temperatureA[i], temperatureB[i] <= 40`\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int temperatureTrend(vector<int>& temperatureA, vector<int>& temperatureB) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int temperatureTrend(int[] temperatureA, int[] temperatureB) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def temperatureTrend(self, temperatureA, temperatureB):\n        \"\"\"\n        :type temperatureA: List[int]\n        :type temperatureB: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def temperatureTrend(self, temperatureA: List[int], temperatureB: List[int]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int temperatureTrend(int* temperatureA, int temperatureASize, int* temperatureB, int temperatureBSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int TemperatureTrend(int[] temperatureA, int[] temperatureB) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} temperatureA\n * @param {number[]} temperatureB\n * @return {number}\n */\nvar temperatureTrend = function(temperatureA, temperatureB) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function temperatureTrend(temperatureA: number[], temperatureB: number[]): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $temperatureA\n     * @param Integer[] $temperatureB\n     * @return Integer\n     */\n    function temperatureTrend($temperatureA, $temperatureB) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func temperatureTrend(_ temperatureA: [Int], _ temperatureB: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun temperatureTrend(temperatureA: IntArray, temperatureB: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int temperatureTrend(List<int> temperatureA, List<int> temperatureB) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func temperatureTrend(temperatureA []int, temperatureB []int) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} temperature_a\n# @param {Integer[]} temperature_b\n# @return {Integer}\ndef temperature_trend(temperature_a, temperature_b)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def temperatureTrend(temperatureA: Array[Int], temperatureB: Array[Int]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn temperature_trend(temperature_a: Vec<i32>, temperature_b: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (temperature-trend temperatureA temperatureB)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec temperature_trend(TemperatureA :: [integer()], TemperatureB :: [integer()]) -> integer().\ntemperature_trend(TemperatureA, TemperatureB) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec temperature_trend(temperature_a :: [integer], temperature_b :: [integer]) :: integer\n  def temperature_trend(temperature_a, temperature_b) do\n\n  end\nend"}],"testcase":"[21,18,18,18,31]\n[34,32,16,16,17]","testable":true,"templateMeta":{"name":"temperatureTrend","params":[{"name":"temperatureA","type":"integer[]"},{"name":"temperatureB","type":"integer[]"}],"return":{"type":"integer"}}}
{"id":2812,"fid":"2769","name":"找出最大的可达成数字","slug":"find-the-maximum-achievable-number","link":"https://leetcode.cn/problems/find-the-maximum-achievable-number/description/","percent":89.71248130297491,"level":"Easy","category":"algorithms","en_name":"Find the Maximum Achievable Number","cn_name":"找出最大的可达成数字","totalAC":"24.3K","totalSubmit":"26.4K","likes":31,"dislikes":0,"desc":"<p>给你两个整数 <code>num</code> 和 <code>t</code> 。</p>\n\n<p>如果整数 <code>x</code> 可以在执行下述操作不超过 <code>t</code> 次的情况下变为与 <code>num</code> 相等，则称其为 <strong>可达成数字</strong> ：</p>\n\n<ul>\n\t<li>每次操作将 <code>x</code> 的值增加或减少 <code>1</code> ，同时可以选择将 <code>num</code> 的值增加或减少 <code>1</code> 。</li>\n</ul>\n\n<p>返回所有可达成数字中的最大值。可以证明至少存在一个可达成数字。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>num = 4, t = 1\n<strong>输出：</strong>6\n<strong>解释：</strong>最大可达成数字是 x = 6 ，执行下述操作可以使其等于 num ：\n- x 减少 1 ，同时 num 增加 1 。此时，x = 5 且 num = 5 。 \n可以证明不存在大于 6 的可达成数字。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>num = 3, t = 2\n<strong>输出：</strong>7\n<strong>解释：</strong>最大的可达成数字是 x = 7 ，执行下述操作可以使其等于 num ：\n- x 减少 1 ，同时 num 增加 1 。此时，x = 6 且 num = 4 。 \n- x 减少 1 ，同时 num 增加 1 。此时，x = 5 且 num = 5 。 \n可以证明不存在大于 7 的可达成数字。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num, t&nbsp;&lt;= 50</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int theMaximumAchievableX(int num, int t) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int theMaximumAchievableX(int num, int t) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def theMaximumAchievableX(self, num, t):\n        \"\"\"\n        :type num: int\n        :type t: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def theMaximumAchievableX(self, num: int, t: int) -> int:"},{"value":"c","text":"C","defaultCode":"int theMaximumAchievableX(int num, int t){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int TheMaximumAchievableX(int num, int t) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} num\n * @param {number} t\n * @return {number}\n */\nvar theMaximumAchievableX = function(num, t) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function theMaximumAchievableX(num: number, t: number): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $num\n     * @param Integer $t\n     * @return Integer\n     */\n    function theMaximumAchievableX($num, $t) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func theMaximumAchievableX(_ num: Int, _ t: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun theMaximumAchievableX(num: Int, t: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int theMaximumAchievableX(int num, int t) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func theMaximumAchievableX(num int, t int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num\n# @param {Integer} t\n# @return {Integer}\ndef the_maximum_achievable_x(num, t)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def theMaximumAchievableX(num: Int, t: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn the_maximum_achievable_x(num: i32, t: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (the-maximum-achievable-x num t)\n  (-> exact-integer? exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec the_maximum_achievable_x(Num :: integer(), T :: integer()) -> integer().\nthe_maximum_achievable_x(Num, T) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec the_maximum_achievable_x(num :: integer, t :: integer) :: integer\n  def the_maximum_achievable_x(num, t) do\n\n  end\nend"}],"testcase":"4\n1","testable":true,"templateMeta":{"name":"theMaximumAchievableX","params":[{"name":"num","type":"integer"},{"type":"integer","name":"t"}],"return":{"type":"integer"}}}
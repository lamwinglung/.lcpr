{"id":2808,"fid":"2742","name":"给墙壁刷油漆","slug":"painting-the-walls","link":"https://leetcode.cn/problems/painting-the-walls/description/","percent":37.98403193612774,"level":"Hard","category":"algorithms","en_name":"Painting the Walls","cn_name":"给墙壁刷油漆","totalAC":"5.6K","totalSubmit":"12.7K","likes":52,"dislikes":0,"desc":"<p>给你两个长度为 <code>n</code>&nbsp;下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>cost</code> 和&nbsp;<code>time</code>&nbsp;，分别表示给&nbsp;<code>n</code>&nbsp;堵不同的墙刷油漆需要的开销和时间。你有两名油漆匠：</p>\n\n<ul>\n\t<li>一位需要 <strong>付费</strong>&nbsp;的油漆匠，刷第&nbsp;<code>i</code>&nbsp;堵墙需要花费&nbsp;<code>time[i]</code>&nbsp;单位的时间，开销为&nbsp;<code>cost[i]</code>&nbsp;单位的钱。</li>\n\t<li>一位 <strong>免费</strong>&nbsp;的油漆匠，刷 <strong>任意</strong>&nbsp;一堵墙的时间为&nbsp;<code>1</code>&nbsp;单位，开销为&nbsp;<code>0</code>&nbsp;。但是必须在付费油漆匠&nbsp;<strong>工作</strong>&nbsp;时，免费油漆匠才会工作。</li>\n</ul>\n\n<p>请你返回刷完 <code>n</code>&nbsp;堵墙最少开销为多少。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>cost = [1,2,3,2], time = [1,2,3,2]\n<b>输出：</b>3\n<strong>解释：</strong>下标为 0 和 1 的墙由付费油漆匠来刷，需要 3 单位时间。同时，免费油漆匠刷下标为 2 和 3 的墙，需要 2 单位时间，开销为 0 。总开销为 1 + 2 = 3 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>cost = [2,3,4,2], time = [1,1,1,1]\n<b>输出：</b>4\n<b>解释：</b>下标为 0 和 3 的墙由付费油漆匠来刷，需要 2 单位时间。同时，免费油漆匠刷下标为 1 和 2 的墙，需要 2 单位时间，开销为 0 。总开销为 2 + 2 = 4 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= cost.length &lt;= 500</code></li>\n\t<li><code>cost.length == time.length</code></li>\n\t<li><code>1 &lt;= cost[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= time[i] &lt;= 500</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int paintWalls(vector<int>& cost, vector<int>& time) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int paintWalls(int[] cost, int[] time) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def paintWalls(self, cost, time):\n        \"\"\"\n        :type cost: List[int]\n        :type time: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def paintWalls(self, cost: List[int], time: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"int paintWalls(int* cost, int costSize, int* time, int timeSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int PaintWalls(int[] cost, int[] time) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} cost\n * @param {number[]} time\n * @return {number}\n */\nvar paintWalls = function(cost, time) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function paintWalls(cost: number[], time: number[]): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $cost\n     * @param Integer[] $time\n     * @return Integer\n     */\n    function paintWalls($cost, $time) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func paintWalls(_ cost: [Int], _ time: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun paintWalls(cost: IntArray, time: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int paintWalls(List<int> cost, List<int> time) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func paintWalls(cost []int, time []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} cost\n# @param {Integer[]} time\n# @return {Integer}\ndef paint_walls(cost, time)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def paintWalls(cost: Array[Int], time: Array[Int]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn paint_walls(cost: Vec<i32>, time: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (paint-walls cost time)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec paint_walls(Cost :: [integer()], Time :: [integer()]) -> integer().\npaint_walls(Cost, Time) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec paint_walls(cost :: [integer], time :: [integer]) :: integer\n  def paint_walls(cost, time) do\n\n  end\nend"}],"testcase":"[1,2,3,2]\n[1,2,3,2]","testable":true,"templateMeta":{"name":"paintWalls","params":[{"name":"cost","type":"integer[]"},{"type":"integer[]","name":"time"}],"return":{"type":"integer"}}}
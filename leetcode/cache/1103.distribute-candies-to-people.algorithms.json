{"id":1195,"fid":"1103","name":"分糖果 II","slug":"distribute-candies-to-people","link":"https://leetcode.cn/problems/distribute-candies-to-people/description/","percent":64.14010327953065,"level":"Easy","category":"algorithms","en_name":"Distribute Candies to People","cn_name":"分糖果 II","totalAC":"51.2K","totalSubmit":"78.5K","likes":137,"dislikes":0,"desc":"<p>排排坐，分糖果。</p>\n\n<p>我们买了一些糖果 <code>candies</code>，打算把它们分给排好队的 <strong><code>n = num_people</code></strong> 个小朋友。</p>\n\n<p>给第一个小朋友 1 颗糖果，第二个小朋友 2 颗，依此类推，直到给最后一个小朋友 <code>n</code>&nbsp;颗糖果。</p>\n\n<p>然后，我们再回到队伍的起点，给第一个小朋友 <code>n&nbsp;+ 1</code> 颗糖果，第二个小朋友 <code>n&nbsp;+ 2</code> 颗，依此类推，直到给最后一个小朋友 <code>2 * n</code>&nbsp;颗糖果。</p>\n\n<p>重复上述过程（每次都比上一次多给出一颗糖果，当到达队伍终点后再次从队伍起点开始），直到我们分完所有的糖果。注意，就算我们手中的剩下糖果数不够（不比前一次发出的糖果多），这些糖果也会全部发给当前的小朋友。</p>\n\n<p>返回一个长度为 <code>num_people</code>、元素之和为 <code>candies</code> 的数组，以表示糖果的最终分发情况（即 <code>ans[i]</code> 表示第 <code>i</code> 个小朋友分到的糖果数）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>candies = 7, num_people = 4\n<strong>输出：</strong>[1,2,3,1]\n<strong>解释：</strong>\n第一次，ans[0] += 1，数组变为 [1,0,0,0]。\n第二次，ans[1] += 2，数组变为 [1,2,0,0]。\n第三次，ans[2] += 3，数组变为 [1,2,3,0]。\n第四次，ans[3] += 1（因为此时只剩下 1 颗糖果），最终数组变为 [1,2,3,1]。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>candies = 10, num_people = 3\n<strong>输出：</strong>[5,2,3]\n<strong>解释：</strong>\n第一次，ans[0] += 1，数组变为 [1,0,0]。\n第二次，ans[1] += 2，数组变为 [1,2,0]。\n第三次，ans[2] += 3，数组变为 [1,2,3]。\n第四次，ans[0] += 4，最终数组变为 [5,2,3]。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= candies &lt;= 10^9</code></li>\n\t<li><code>1 &lt;= num_people &lt;= 1000</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> distributeCandies(int candies, int num_people) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] distributeCandies(int candies, int num_people) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def distributeCandies(self, candies, num_people):\n        \"\"\"\n        :type candies: int\n        :type num_people: int\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def distributeCandies(self, candies: int, num_people: int) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* distributeCandies(int candies, int num_people, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] DistributeCandies(int candies, int num_people) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} candies\n * @param {number} num_people\n * @return {number[]}\n */\nvar distributeCandies = function(candies, num_people) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function distributeCandies(candies: number, num_people: number): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $candies\n     * @param Integer $num_people\n     * @return Integer[]\n     */\n    function distributeCandies($candies, $num_people) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func distributeCandies(_ candies: Int, _ num_people: Int) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun distributeCandies(candies: Int, num_people: Int): IntArray {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> distributeCandies(int candies, int num_people) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func distributeCandies(candies int, num_people int) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} candies\n# @param {Integer} num_people\n# @return {Integer[]}\ndef distribute_candies(candies, num_people)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def distributeCandies(candies: Int, num_people: Int): Array[Int] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn distribute_candies(candies: i32, num_people: i32) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (distribute-candies candies num_people)\n  (-> exact-integer? exact-integer? (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec distribute_candies(Candies :: integer(), Num_people :: integer()) -> [integer()].\ndistribute_candies(Candies, Num_people) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec distribute_candies(candies :: integer, num_people :: integer) :: [integer]\n  def distribute_candies(candies, num_people) do\n    \n  end\nend"}],"testcase":"7\n4","testable":true,"templateMeta":{"name":"distributeCandies","params":[{"name":"candies","type":"integer"},{"type":"integer","name":"num_people"}],"return":{"type":"integer[]"}}}
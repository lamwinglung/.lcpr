{"id":2832,"fid":"2831","name":"找出最长等值子数组","slug":"find-the-longest-equal-subarray","link":"https://leetcode.cn/problems/find-the-longest-equal-subarray/description/","percent":41.98680351906158,"level":"Medium","category":"algorithms","en_name":"Find the Longest Equal Subarray","cn_name":"找出最长等值子数组","totalAC":"10K","totalSubmit":"21.3K","likes":65,"dislikes":0,"desc":"<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p>\n\n<p>如果子数组中所有元素都相等，则认为子数组是一个 <strong>等值子数组</strong> 。注意，空数组是 <strong>等值子数组</strong> 。</p>\n\n<p>从 <code>nums</code> 中删除最多 <code>k</code> 个元素后，返回可能的最长等值子数组的长度。</p>\n\n<p><strong>子数组</strong> 是数组中一个连续且可能为空的元素序列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,3,2,3,1,3], k = 3\n<strong>输出：</strong>3\n<strong>解释：</strong>最优的方案是删除下标 2 和下标 4 的元素。\n删除后，nums 等于 [1, 3, 3, 3] 。\n最长等值子数组从 i = 1 开始到 j = 3 结束，长度等于 3 。\n可以证明无法创建更长的等值子数组。\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,1,2,2,1,1], k = 2\n<strong>输出：</strong>4\n<strong>解释：</strong>最优的方案是删除下标 2 和下标 3 的元素。 \n删除后，nums 等于 [1, 1, 1, 1] 。 \n数组自身就是等值子数组，长度等于 4 。 \n可以证明无法创建更长的等值子数组。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= nums.length</code></li>\n\t<li><code>0 &lt;= k &lt;= nums.length</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int longestEqualSubarray(vector<int>& nums, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int longestEqualSubarray(List<Integer> nums, int k) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def longestEqualSubarray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def longestEqualSubarray(self, nums: List[int], k: int) -> int:"},{"value":"c","text":"C","defaultCode":"int longestEqualSubarray(int* nums, int numsSize, int k){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int LongestEqualSubarray(IList<int> nums, int k) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar longestEqualSubarray = function(nums, k) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function longestEqualSubarray(nums: number[], k: number): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function longestEqualSubarray($nums, $k) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func longestEqualSubarray(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun longestEqualSubarray(nums: List<Int>, k: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int longestEqualSubarray(List<int> nums, int k) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func longestEqualSubarray(nums []int, k int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef longest_equal_subarray(nums, k)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def longestEqualSubarray(nums: List[Int], k: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn longest_equal_subarray(nums: Vec<i32>, k: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (longest-equal-subarray nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec longest_equal_subarray(Nums :: [integer()], K :: integer()) -> integer().\nlongest_equal_subarray(Nums, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec longest_equal_subarray(nums :: [integer], k :: integer) :: integer\n  def longest_equal_subarray(nums, k) do\n\n  end\nend"}],"testcase":"[1,3,2,3,1,3]\n3","testable":true,"templateMeta":{"name":"longestEqualSubarray","params":[{"name":"nums","type":"list<integer>"},{"type":"integer","name":"k"}],"return":{"type":"integer"}}}
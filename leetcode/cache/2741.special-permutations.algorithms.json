{"id":2848,"fid":"2741","name":"特别的排列","slug":"special-permutations","link":"https://leetcode.cn/problems/special-permutations/description/","percent":37.14848783445767,"level":"Medium","category":"algorithms","en_name":"Special Permutations","cn_name":"特别的排列","totalAC":"6.8K","totalSubmit":"15.8K","likes":54,"dislikes":0,"desc":"<p>给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>nums</code>&nbsp;，它包含 <code>n</code>&nbsp;个 <strong>互不相同</strong>&nbsp;的正整数。如果&nbsp;<code>nums</code>&nbsp;的一个排列满足以下条件，我们称它是一个特别的排列：</p>\n\n<ul>\n\t<li>对于&nbsp;<code>0 &lt;= i &lt; n - 1</code>&nbsp;的下标 <code>i</code>&nbsp;，要么&nbsp;<code>nums[i] % nums[i+1] == 0</code>&nbsp;，要么&nbsp;<code>nums[i+1] % nums[i] == 0</code>&nbsp;。</li>\n</ul>\n\n<p>请你返回特别排列的总数目，由于答案可能很大，请将它对<strong>&nbsp;</strong><code>10<sup>9&nbsp;</sup>+ 7</code>&nbsp;<strong>取余</strong>&nbsp;后返回。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [2,3,6]\n<b>输出：</b>2\n<b>解释：</b>[3,6,2] 和 [2,6,3] 是 nums 两个特别的排列。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [1,4,3]\n<b>输出：</b>2\n<b>解释：</b>[3,1,4] 和 [4,1,3] 是 nums 两个特别的排列。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 14</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int specialPerm(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int specialPerm(int[] nums) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def specialPerm(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def specialPerm(self, nums: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"int specialPerm(int* nums, int numsSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int SpecialPerm(int[] nums) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar specialPerm = function(nums) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function specialPerm(nums: number[]): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function specialPerm($nums) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func specialPerm(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun specialPerm(nums: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int specialPerm(List<int> nums) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func specialPerm(nums []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer}\ndef special_perm(nums)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def specialPerm(nums: Array[Int]): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn special_perm(nums: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (special-perm nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec special_perm(Nums :: [integer()]) -> integer().\nspecial_perm(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec special_perm(nums :: [integer]) :: integer\n  def special_perm(nums) do\n\n  end\nend"}],"testcase":"[2,3,6]","testable":true,"templateMeta":{"name":"specialPerm","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}
{"id":1860,"fid":"1738","name":"找出第 K 大的异或坐标值","slug":"find-kth-largest-xor-coordinate-value","link":"https://leetcode.cn/problems/find-kth-largest-xor-coordinate-value/description/","percent":65.05034393380521,"level":"Medium","category":"algorithms","en_name":"Find Kth Largest XOR Coordinate Value","cn_name":"找出第 K 大的异或坐标值","totalAC":"44.2K","totalSubmit":"65.1K","likes":128,"dislikes":0,"desc":"<p>给你一个二维矩阵 <code>matrix</code> 和一个整数 <code>k</code> ，矩阵大小为 <code>m x n</code> 由非负整数组成。</p>\n\n<p>矩阵中坐标 <code>(a, b)</code> 的 <strong>值</strong> 可由对所有满足 <code>0 &lt;= i &lt;= a &lt; m</code> 且 <code>0 &lt;= j &lt;= b &lt; n</code> 的元素 <code>matrix[i][j]</code>（<strong>下标从 0 开始计数</strong>）执行异或运算得到。</p>\n\n<p>请你找出 <code>matrix</code> 的所有坐标中第 <code>k</code> 大的值（<strong><code>k</code> 的值从 1 开始计数</strong>）。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>matrix = [[5,2],[1,6]], k = 1\n<strong>输出：</strong>7\n<strong>解释：</strong>坐标 (0,1) 的值是 5 XOR 2 = 7 ，为最大的值。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>matrix = [[5,2],[1,6]], k = 2\n<strong>输出：</strong>5\n<strong>解释：</strong>坐标 (0,0) 的值是 5 = 5 ，为第 2 大的值。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>matrix = [[5,2],[1,6]], k = 3\n<strong>输出：</strong>4\n<strong>解释：</strong>坐标 (1,0) 的值是 5 XOR 1 = 4 ，为第 3 大的值。</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>matrix = [[5,2],[1,6]], k = 4\n<strong>输出：</strong>0\n<strong>解释：</strong>坐标 (1,1) 的值是 5 XOR 2 XOR 1 XOR 6 = 0 ，为第 4 大的值。</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= matrix[i][j] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= m * n</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int kthLargestValue(vector<vector<int>>& matrix, int k) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int kthLargestValue(int[][] matrix, int k) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def kthLargestValue(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def kthLargestValue(self, matrix: List[List[int]], k: int) -> int:"},{"value":"c","text":"C","defaultCode":"int kthLargestValue(int** matrix, int matrixSize, int* matrixColSize, int k) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int KthLargestValue(int[][] matrix, int k) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} matrix\n * @param {number} k\n * @return {number}\n */\nvar kthLargestValue = function(matrix, k) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function kthLargestValue(matrix: number[][], k: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @param Integer $k\n     * @return Integer\n     */\n    function kthLargestValue($matrix, $k) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func kthLargestValue(_ matrix: [[Int]], _ k: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun kthLargestValue(matrix: Array<IntArray>, k: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int kthLargestValue(List<List<int>> matrix, int k) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func kthLargestValue(matrix [][]int, k int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} matrix\n# @param {Integer} k\n# @return {Integer}\ndef kth_largest_value(matrix, k)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def kthLargestValue(matrix: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn kth_largest_value(matrix: Vec<Vec<i32>>, k: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (kth-largest-value matrix k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec kth_largest_value(Matrix :: [[integer()]], K :: integer()) -> integer().\nkth_largest_value(Matrix, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec kth_largest_value(matrix :: [[integer]], k :: integer) :: integer\n  def kth_largest_value(matrix, k) do\n    \n  end\nend"}],"testcase":"[[5,2],[1,6]]\n1","testable":true,"templateMeta":{"name":"kthLargestValue","params":[{"name":"matrix","type":"integer[][]"},{"type":"integer","name":"k"}],"return":{"type":"integer"}}}
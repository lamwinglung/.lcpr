{"id":3330,"fid":"3033","name":"修改矩阵","slug":"modify-the-matrix","link":"https://leetcode.cn/problems/modify-the-matrix/description/","percent":79.12385073012439,"level":"Easy","category":"algorithms","en_name":"Modify the Matrix","cn_name":"修改矩阵","totalAC":"16.3K","totalSubmit":"19.5K","likes":17,"dislikes":0,"desc":"<p>给你一个下标从 <strong>0</strong> 开始、大小为 <code>m x n</code> 的整数矩阵 <code>matrix</code> ，新建一个下标从 <strong>0</strong> 开始、名为 <code>answer</code> 的矩阵。使 <code>answer</code> 与 <code>matrix</code> 相等，接着将其中每个值为 <code>-1</code> 的元素替换为所在列的 <strong>最大</strong> 元素。</p>\n\n<p>返回矩阵 <code>answer</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/24/matrix1.png\" style=\"width: 491px; height: 161px;\" />\n<pre>\n<strong>输入：</strong>matrix = [[1,2,-1],[4,-1,6],[7,8,9]]\n<strong>输出：</strong>[[1,2,9],[4,8,6],[7,8,9]]\n<strong>解释：</strong>上图显示了发生替换的元素（蓝色区域）。\n- 将单元格 [1][1] 中的值替换为列 1 中的最大值 8 。\n- 将单元格 [0][2] 中的值替换为列 2 中的最大值 9 。\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/12/24/matrix2.png\" style=\"width: 411px; height: 111px;\" />\n<pre>\n<strong>输入：</strong>matrix = [[3,-1],[5,2]]\n<strong>输出：</strong>[[3,2],[5,2]]\n<strong>解释：</strong>上图显示了发生替换的元素（蓝色区域）。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>2 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>-1 &lt;= matrix[i][j] &lt;= 100</code></li>\n\t<li>测试用例中生成的输入满足每列至少包含一个非负整数。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<vector<int>> modifiedMatrix(vector<vector<int>>& matrix) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[][] modifiedMatrix(int[][] matrix) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def modifiedMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def modifiedMatrix(self, matrix: List[List[int]]) -> List[List[int]]:"},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** modifiedMatrix(int** matrix, int matrixSize, int* matrixColSize, int* returnSize, int** returnColumnSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[][] ModifiedMatrix(int[][] matrix) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} matrix\n * @return {number[][]}\n */\nvar modifiedMatrix = function(matrix) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function modifiedMatrix(matrix: number[][]): number[][] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[][]\n     */\n    function modifiedMatrix($matrix) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func modifiedMatrix(_ matrix: [[Int]]) -> [[Int]] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun modifiedMatrix(matrix: Array<IntArray>): Array<IntArray> {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<List<int>> modifiedMatrix(List<List<int>> matrix) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func modifiedMatrix(matrix [][]int) [][]int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} matrix\n# @return {Integer[][]}\ndef modified_matrix(matrix)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def modifiedMatrix(matrix: Array[Array[Int]]): Array[Array[Int]] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn modified_matrix(matrix: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (modified-matrix matrix)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec modified_matrix(Matrix :: [[integer()]]) -> [[integer()]].\nmodified_matrix(Matrix) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec modified_matrix(matrix :: [[integer]]) :: [[integer]]\n  def modified_matrix(matrix) do\n    \n  end\nend"}],"testcase":"[[1,2,-1],[4,-1,6],[7,8,9]]","testable":true,"templateMeta":{"name":"modifiedMatrix","params":[{"name":"matrix","type":"integer[][]"}],"return":{"type":"integer[][]"}}}
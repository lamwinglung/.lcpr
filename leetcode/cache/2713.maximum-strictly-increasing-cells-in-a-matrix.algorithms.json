{"id":2818,"fid":"2713","name":"矩阵中严格递增的单元格数","slug":"maximum-strictly-increasing-cells-in-a-matrix","link":"https://leetcode.cn/problems/maximum-strictly-increasing-cells-in-a-matrix/description/","percent":36.2758945386064,"level":"Hard","category":"algorithms","en_name":"Maximum Strictly Increasing Cells in a Matrix","cn_name":"矩阵中严格递增的单元格数","totalAC":"4.8K","totalSubmit":"11K","likes":56,"dislikes":0,"desc":"<p>给你一个下标从 <strong>1</strong> 开始、大小为 <code>m x n</code> 的整数矩阵 <code>mat</code>，你可以选择任一单元格作为 <strong>起始单元格</strong> 。</p>\n\n<p>从起始单元格出发，你可以移动到 <strong>同一行或同一列</strong> 中的任何其他单元格，但前提是目标单元格的值<strong> 严格大于 </strong>当前单元格的值。</p>\n\n<p>你可以多次重复这一过程，从一个单元格移动到另一个单元格，直到无法再进行任何移动。</p>\n\n<p>请你找出从某个单元开始访问矩阵所能访问的 <strong>单元格的最大数量</strong> 。</p>\n\n<p>返回一个表示可访问单元格最大数量的整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/04/23/diag1drawio.png\" style=\"width: 200px; height: 176px;\"></strong></p>\n\n<pre><strong>输入：</strong>mat = [[3,1],[3,4]]\n<strong>输出：</strong>2\n<strong>解释：</strong>上图展示了从第 1 行、第 2 列的单元格开始，可以访问 2 个单元格。可以证明，无论从哪个单元格开始，最多只能访问 2 个单元格，因此答案是 2 。 \n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/04/23/diag3drawio.png\" style=\"width: 200px; height: 176px;\"></strong></p>\n\n<pre><strong>输入：</strong>mat = [[1,1],[1,1]]\n<strong>输出：</strong>1\n<strong>解释：</strong>由于目标单元格必须严格大于当前单元格，在本示例中只能访问 1 个单元格。 \n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/04/23/diag4drawio.png\" style=\"width: 350px; height: 250px;\"></strong></p>\n\n<pre><strong>输入：</strong>mat = [[3,1,6],[-9,5,7]]\n<strong>输出：</strong>4\n<strong>解释：</strong>上图展示了从第 2 行、第 1 列的单元格开始，可以访问 4 个单元格。可以证明，无论从哪个单元格开始，最多只能访问 4 个单元格，因此答案是 4 。  \n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == mat.length&nbsp;</code></li>\n\t<li><code>n == mat[i].length&nbsp;</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>5</sup>&nbsp;&lt;= mat[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maxIncreasingCells(vector<vector<int>>& mat) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maxIncreasingCells(int[][] mat) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxIncreasingCells(self, mat):\n        \"\"\"\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxIncreasingCells(self, mat: List[List[int]]) -> int:"},{"value":"c","text":"C","defaultCode":"int maxIncreasingCells(int** mat, int matSize, int* matColSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaxIncreasingCells(int[][] mat) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} mat\n * @return {number}\n */\nvar maxIncreasingCells = function(mat) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function maxIncreasingCells(mat: number[][]): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @return Integer\n     */\n    function maxIncreasingCells($mat) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxIncreasingCells(_ mat: [[Int]]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxIncreasingCells(mat: Array<IntArray>): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int maxIncreasingCells(List<List<int>> mat) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxIncreasingCells(mat [][]int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} mat\n# @return {Integer}\ndef max_increasing_cells(mat)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxIncreasingCells(mat: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn max_increasing_cells(mat: Vec<Vec<i32>>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (max-increasing-cells mat)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec max_increasing_cells(Mat :: [[integer()]]) -> integer().\nmax_increasing_cells(Mat) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec max_increasing_cells(mat :: [[integer]]) :: integer\n  def max_increasing_cells(mat) do\n\n  end\nend"}],"testcase":"[[3,1],[3,4]]","testable":true,"templateMeta":{"name":"maxIncreasingCells","params":[{"name":"mat","type":"integer[][]"}],"return":{"type":"integer"}}}
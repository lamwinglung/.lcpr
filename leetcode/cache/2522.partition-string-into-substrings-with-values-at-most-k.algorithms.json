{"id":2511,"fid":"2522","name":"将字符串分割成值不超过 K 的子字符串","slug":"partition-string-into-substrings-with-values-at-most-k","link":"https://leetcode.cn/problems/partition-string-into-substrings-with-values-at-most-k/description/","percent":49.70954356846473,"level":"Medium","category":"algorithms","en_name":"Partition String Into Substrings With Values at Most K","cn_name":"将字符串分割成值不超过 K 的子字符串","totalAC":"7.3K","totalSubmit":"14.6K","likes":13,"dislikes":0,"desc":"<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，它每一位都是&nbsp;<code>1</code>&nbsp;到&nbsp;<code>9</code>&nbsp;之间的数字组成，同时给你一个整数&nbsp;<code>k</code>&nbsp;。</p>\n\n<p>如果一个字符串 <code>s</code>&nbsp;的分割满足以下条件，我们称它是一个 <strong>好</strong>&nbsp;分割：</p>\n\n<ul>\n\t<li><code>s</code>&nbsp;中每个数位 <strong>恰好</strong>&nbsp;属于一个子字符串。</li>\n\t<li>每个子字符串的值都小于等于&nbsp;<code>k</code>&nbsp;。</li>\n</ul>\n\n<p>请你返回 <code>s</code>&nbsp;所有的 <strong>好</strong>&nbsp;分割中，子字符串的&nbsp;<strong>最少</strong>&nbsp;数目。如果不存在 <code>s</code>&nbsp;的<strong>&nbsp;好</strong>&nbsp;分割，返回&nbsp;<code>-1</code>&nbsp;。</p>\n\n<p><b>注意：</b></p>\n\n<ul>\n\t<li>一个字符串的 <strong>值</strong>&nbsp;是这个字符串对应的整数。比方说，<code>\"123\"</code>&nbsp;的值为&nbsp;<code>123</code>&nbsp;，<code>\"1\"</code>&nbsp;的值是&nbsp;<code>1</code>&nbsp;。</li>\n\t<li><strong>子字符串</strong>&nbsp;是字符串中一段连续的字符序列。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>s = \"165462\", k = 60\n<b>输出：</b>4\n<b>解释：</b>我们将字符串分割成子字符串 \"16\" ，\"54\" ，\"6\" 和 \"2\" 。每个子字符串的值都小于等于 k = 60 。\n不存在小于 4 个子字符串的好分割。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>s = \"238182\", k = 5\n<b>输出：</b>-1\n<strong>解释：</strong>这个字符串不存在好分割。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code>&nbsp;是&nbsp;<code>'1'</code>&nbsp;到&nbsp;<code>'9'</code>&nbsp;之间的数字。</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minimumPartition(string s, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minimumPartition(String s, int k) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minimumPartition(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minimumPartition(self, s: str, k: int) -> int:"},{"value":"c","text":"C","defaultCode":"int minimumPartition(char* s, int k) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinimumPartition(string s, int k) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar minimumPartition = function(s, k) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function minimumPartition(s: string, k: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumPartition($s, $k) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minimumPartition(_ s: String, _ k: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minimumPartition(s: String, k: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int minimumPartition(String s, int k) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func minimumPartition(s string, k int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef minimum_partition(s, k)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minimumPartition(s: String, k: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn minimum_partition(s: String, k: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (minimum-partition s k)\n  (-> string? exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec minimum_partition(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_partition(S, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec minimum_partition(s :: String.t, k :: integer) :: integer\n  def minimum_partition(s, k) do\n    \n  end\nend"}],"testcase":"\"165462\"\n60","testable":true,"templateMeta":{"name":"minimumPartition","params":[{"name":"s","type":"string"},{"type":"integer","name":"k"}],"return":{"type":"integer"}}}
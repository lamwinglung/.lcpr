{"id":1249,"fid":"1146","name":"快照数组","slug":"snapshot-array","link":"https://leetcode.cn/problems/snapshot-array/description/","percent":37.16419828903583,"level":"Medium","category":"algorithms","en_name":"Snapshot Array","cn_name":"快照数组","totalAC":"26.3K","totalSubmit":"70.6K","likes":170,"dislikes":0,"desc":"<p>实现支持下列接口的「快照数组」-&nbsp;SnapshotArray：</p>\n\n<ul>\n\t<li><code>SnapshotArray(int length)</code>&nbsp;- 初始化一个与指定长度相等的 类数组 的数据结构。<strong>初始时，每个元素都等于</strong><strong>&nbsp;0</strong>。</li>\n\t<li><code>void set(index, val)</code>&nbsp;- 会将指定索引&nbsp;<code>index</code>&nbsp;处的元素设置为&nbsp;<code>val</code>。</li>\n\t<li><code>int snap()</code>&nbsp;- 获取该数组的快照，并返回快照的编号&nbsp;<code>snap_id</code>（快照号是调用&nbsp;<code>snap()</code>&nbsp;的总次数减去&nbsp;<code>1</code>）。</li>\n\t<li><code>int get(index, snap_id)</code>&nbsp;- 根据指定的&nbsp;<code>snap_id</code>&nbsp;选择快照，并返回该快照指定索引 <code>index</code>&nbsp;的值。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>[&quot;SnapshotArray&quot;,&quot;set&quot;,&quot;snap&quot;,&quot;set&quot;,&quot;get&quot;]\n     [[3],[0,5],[],[0,6],[0,0]]\n<strong>输出：</strong>[null,null,0,null,5]\n<strong>解释：\n</strong>SnapshotArray snapshotArr = new SnapshotArray(3); // 初始化一个长度为 3 的快照数组\nsnapshotArr.set(0,5);  // 令 array[0] = 5\nsnapshotArr.snap();  // 获取快照，返回 snap_id = 0\nsnapshotArr.set(0,6);\nsnapshotArr.get(0,0);  // 获取 snap_id = 0 的快照中 array[0] 的值，返回 5</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= length&nbsp;&lt;= 50000</code></li>\n\t<li>题目最多进行<code>50000</code> 次<code>set</code>，<code>snap</code>，和&nbsp;<code>get</code>的调用 。</li>\n\t<li><code>0 &lt;= index&nbsp;&lt;&nbsp;length</code></li>\n\t<li><code>0 &lt;=&nbsp;snap_id &lt;&nbsp;</code>我们调用&nbsp;<code>snap()</code>&nbsp;的总次数</li>\n\t<li><code>0 &lt;=&nbsp;val &lt;= 10^9</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class SnapshotArray {\npublic:\n    SnapshotArray(int length) {\n\n    }\n    \n    void set(int index, int val) {\n\n    }\n    \n    int snap() {\n\n    }\n    \n    int get(int index, int snap_id) {\n\n    }\n};\n\n/**\n * Your SnapshotArray object will be instantiated and called as such:\n * SnapshotArray* obj = new SnapshotArray(length);\n * obj->set(index,val);\n * int param_2 = obj->snap();\n * int param_3 = obj->get(index,snap_id);\n */"},{"value":"java","text":"Java","defaultCode":"class SnapshotArray {\n\n    public SnapshotArray(int length) {\n\n    }\n    \n    public void set(int index, int val) {\n\n    }\n    \n    public int snap() {\n\n    }\n    \n    public int get(int index, int snap_id) {\n\n    }\n}\n\n/**\n * Your SnapshotArray object will be instantiated and called as such:\n * SnapshotArray obj = new SnapshotArray(length);\n * obj.set(index,val);\n * int param_2 = obj.snap();\n * int param_3 = obj.get(index,snap_id);\n */"},{"value":"python","text":"Python","defaultCode":"class SnapshotArray(object):\n\n    def __init__(self, length):\n        \"\"\"\n        :type length: int\n        \"\"\"\n\n\n    def set(self, index, val):\n        \"\"\"\n        :type index: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n\n\n    def snap(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n\n\n    def get(self, index, snap_id):\n        \"\"\"\n        :type index: int\n        :type snap_id: int\n        :rtype: int\n        \"\"\"\n\n\n\n# Your SnapshotArray object will be instantiated and called as such:\n# obj = SnapshotArray(length)\n# obj.set(index,val)\n# param_2 = obj.snap()\n# param_3 = obj.get(index,snap_id)"},{"value":"python3","text":"Python3","defaultCode":"class SnapshotArray:\n\n    def __init__(self, length: int):\n\n\n    def set(self, index: int, val: int) -> None:\n\n\n    def snap(self) -> int:\n\n\n    def get(self, index: int, snap_id: int) -> int:\n\n\n\n# Your SnapshotArray object will be instantiated and called as such:\n# obj = SnapshotArray(length)\n# obj.set(index,val)\n# param_2 = obj.snap()\n# param_3 = obj.get(index,snap_id)"},{"value":"c","text":"C","defaultCode":"\n\n\ntypedef struct {\n    \n} SnapshotArray;\n\n\nSnapshotArray* snapshotArrayCreate(int length) {\n    \n}\n\nvoid snapshotArraySet(SnapshotArray* obj, int index, int val) {\n    \n}\n\nint snapshotArraySnap(SnapshotArray* obj) {\n    \n}\n\nint snapshotArrayGet(SnapshotArray* obj, int index, int snap_id) {\n    \n}\n\nvoid snapshotArrayFree(SnapshotArray* obj) {\n    \n}\n\n/**\n * Your SnapshotArray struct will be instantiated and called as such:\n * SnapshotArray* obj = snapshotArrayCreate(length);\n * snapshotArraySet(obj, index, val);\n \n * int param_2 = snapshotArraySnap(obj);\n \n * int param_3 = snapshotArrayGet(obj, index, snap_id);\n \n * snapshotArrayFree(obj);\n*/"},{"value":"csharp","text":"C#","defaultCode":"public class SnapshotArray {\n\n    public SnapshotArray(int length) {\n\n    }\n    \n    public void Set(int index, int val) {\n\n    }\n    \n    public int Snap() {\n\n    }\n    \n    public int Get(int index, int snap_id) {\n\n    }\n}\n\n/**\n * Your SnapshotArray object will be instantiated and called as such:\n * SnapshotArray obj = new SnapshotArray(length);\n * obj.Set(index,val);\n * int param_2 = obj.Snap();\n * int param_3 = obj.Get(index,snap_id);\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} length\n */\nvar SnapshotArray = function(length) {\n\n};\n\n/** \n * @param {number} index \n * @param {number} val\n * @return {void}\n */\nSnapshotArray.prototype.set = function(index, val) {\n\n};\n\n/**\n * @return {number}\n */\nSnapshotArray.prototype.snap = function() {\n\n};\n\n/** \n * @param {number} index \n * @param {number} snap_id\n * @return {number}\n */\nSnapshotArray.prototype.get = function(index, snap_id) {\n\n};\n\n/**\n * Your SnapshotArray object will be instantiated and called as such:\n * var obj = new SnapshotArray(length)\n * obj.set(index,val)\n * var param_2 = obj.snap()\n * var param_3 = obj.get(index,snap_id)\n */"},{"value":"typescript","text":"TypeScript","defaultCode":"class SnapshotArray {\n    constructor(length: number) {\n        \n    }\n\n    set(index: number, val: number): void {\n        \n    }\n\n    snap(): number {\n        \n    }\n\n    get(index: number, snap_id: number): number {\n        \n    }\n}\n\n/**\n * Your SnapshotArray object will be instantiated and called as such:\n * var obj = new SnapshotArray(length)\n * obj.set(index,val)\n * var param_2 = obj.snap()\n * var param_3 = obj.get(index,snap_id)\n */"},{"value":"php","text":"PHP","defaultCode":"class SnapshotArray {\n    /**\n     * @param Integer $length\n     */\n    function __construct($length) {\n\n    }\n\n    /**\n     * @param Integer $index\n     * @param Integer $val\n     * @return NULL\n     */\n    function set($index, $val) {\n\n    }\n\n    /**\n     * @return Integer\n     */\n    function snap() {\n\n    }\n\n    /**\n     * @param Integer $index\n     * @param Integer $snap_id\n     * @return Integer\n     */\n    function get($index, $snap_id) {\n\n    }\n}\n\n/**\n * Your SnapshotArray object will be instantiated and called as such:\n * $obj = SnapshotArray($length);\n * $obj->set($index, $val);\n * $ret_2 = $obj->snap();\n * $ret_3 = $obj->get($index, $snap_id);\n */"},{"value":"swift","text":"Swift","defaultCode":"\nclass SnapshotArray {\n\n    init(_ length: Int) {\n\n    }\n    \n    func set(_ index: Int, _ val: Int) {\n\n    }\n    \n    func snap() -> Int {\n\n    }\n    \n    func get(_ index: Int, _ snap_id: Int) -> Int {\n\n    }\n}\n\n/**\n * Your SnapshotArray object will be instantiated and called as such:\n * let obj = SnapshotArray(length)\n * obj.set(index, val)\n * let ret_2: Int = obj.snap()\n * let ret_3: Int = obj.get(index, snap_id)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class SnapshotArray(length: Int) {\n\n    fun set(index: Int, `val`: Int) {\n\n    }\n\n    fun snap(): Int {\n\n    }\n\n    fun get(index: Int, snap_id: Int): Int {\n\n    }\n\n}\n\n/**\n * Your SnapshotArray object will be instantiated and called as such:\n * var obj = SnapshotArray(length)\n * obj.set(index,`val`)\n * var param_2 = obj.snap()\n * var param_3 = obj.get(index,snap_id)\n */"},{"value":"dart","text":"Dart","defaultCode":"class SnapshotArray {\n\n  SnapshotArray(int length) {\n    \n  }\n  \n  void set(int index, int val) {\n    \n  }\n  \n  int snap() {\n    \n  }\n  \n  int get(int index, int snap_id) {\n    \n  }\n}\n\n/**\n * Your SnapshotArray object will be instantiated and called as such:\n * SnapshotArray obj = SnapshotArray(length);\n * obj.set(index,val);\n * int param2 = obj.snap();\n * int param3 = obj.get(index,snap_id);\n */"},{"value":"golang","text":"Go","defaultCode":"type SnapshotArray struct {\n\n}\n\n\nfunc Constructor(length int) SnapshotArray {\n\n}\n\n\nfunc (this *SnapshotArray) Set(index int, val int)  {\n\n}\n\n\nfunc (this *SnapshotArray) Snap() int {\n\n}\n\n\nfunc (this *SnapshotArray) Get(index int, snap_id int) int {\n\n}\n\n\n/**\n * Your SnapshotArray object will be instantiated and called as such:\n * obj := Constructor(length);\n * obj.Set(index,val);\n * param_2 := obj.Snap();\n * param_3 := obj.Get(index,snap_id);\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class SnapshotArray\n\n=begin\n    :type length: Integer\n=end\n    def initialize(length)\n\n    end\n\n\n=begin\n    :type index: Integer\n    :type val: Integer\n    :rtype: Void\n=end\n    def set(index, val)\n\n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def snap()\n\n    end\n\n\n=begin\n    :type index: Integer\n    :type snap_id: Integer\n    :rtype: Integer\n=end\n    def get(index, snap_id)\n\n    end\n\n\nend\n\n# Your SnapshotArray object will be instantiated and called as such:\n# obj = SnapshotArray.new(length)\n# obj.set(index, val)\n# param_2 = obj.snap()\n# param_3 = obj.get(index, snap_id)"},{"value":"scala","text":"Scala","defaultCode":"class SnapshotArray(_length: Int) {\n\n    def set(index: Int, `val`: Int) {\n\n    }\n\n    def snap(): Int = {\n\n    }\n\n    def get(index: Int, snap_id: Int): Int = {\n\n    }\n\n}\n\n/**\n * Your SnapshotArray object will be instantiated and called as such:\n * var obj = new SnapshotArray(length)\n * obj.set(index,`val`)\n * var param_2 = obj.snap()\n * var param_3 = obj.get(index,snap_id)\n */"},{"value":"rust","text":"Rust","defaultCode":"struct SnapshotArray {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl SnapshotArray {\n\n    fn new(length: i32) -> Self {\n\n    }\n    \n    fn set(&self, index: i32, val: i32) {\n\n    }\n    \n    fn snap(&self) -> i32 {\n\n    }\n    \n    fn get(&self, index: i32, snap_id: i32) -> i32 {\n\n    }\n}\n\n/**\n * Your SnapshotArray object will be instantiated and called as such:\n * let obj = SnapshotArray::new(length);\n * obj.set(index, val);\n * let ret_2: i32 = obj.snap();\n * let ret_3: i32 = obj.get(index, snap_id);\n */"},{"value":"racket","text":"Racket","defaultCode":"(define snapshot-array%\n  (class object%\n    (super-new)\n    \n    ; length : exact-integer?\n    (init-field\n      length)\n    \n    ; set : exact-integer? exact-integer? -> void?\n    (define/public (set index val)\n      )\n    ; snap : -> exact-integer?\n    (define/public (snap)\n      )\n    ; get : exact-integer? exact-integer? -> exact-integer?\n    (define/public (get index snap_id)\n      )))\n\n;; Your snapshot-array% object will be instantiated and called as such:\n;; (define obj (new snapshot-array% [length length]))\n;; (send obj set index val)\n;; (define param_2 (send obj snap))\n;; (define param_3 (send obj get index snap_id))"},{"value":"erlang","text":"Erlang","defaultCode":"-spec snapshot_array_init_(Length :: integer()) -> any().\nsnapshot_array_init_(Length) ->\n  .\n\n-spec snapshot_array_set(Index :: integer(), Val :: integer()) -> any().\nsnapshot_array_set(Index, Val) ->\n  .\n\n-spec snapshot_array_snap() -> integer().\nsnapshot_array_snap() ->\n  .\n\n-spec snapshot_array_get(Index :: integer(), Snap_id :: integer()) -> integer().\nsnapshot_array_get(Index, Snap_id) ->\n  .\n\n\n%% Your functions will be called as such:\n%% snapshot_array_init_(Length),\n%% snapshot_array_set(Index, Val),\n%% Param_2 = snapshot_array_snap(),\n%% Param_3 = snapshot_array_get(Index, Snap_id),\n\n%% snapshot_array_init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule SnapshotArray do\n  @spec init_(length :: integer) :: any\n  def init_(length) do\n    \n  end\n\n  @spec set(index :: integer, val :: integer) :: any\n  def set(index, val) do\n    \n  end\n\n  @spec snap() :: integer\n  def snap() do\n    \n  end\n\n  @spec get(index :: integer, snap_id :: integer) :: integer\n  def get(index, snap_id) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# SnapshotArray.init_(length)\n# SnapshotArray.set(index, val)\n# param_2 = SnapshotArray.snap()\n# param_3 = SnapshotArray.get(index, snap_id)\n\n# SnapshotArray.init_ will be called before every test case, in which you can do some necessary initializations."}],"testcase":"[\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]\n[[3],[0,5],[],[0,6],[0,0]]","testable":true,"templateMeta":{"classname":"SnapshotArray","maxbytesperline":400000,"constructor":{"params":[{"type":"integer","name":"length"}]},"methods":[{"params":[{"type":"integer","name":"index"},{"type":"integer","name":"val"}],"name":"set","return":{"type":"void"}},{"params":[],"name":"snap","return":{"type":"integer"}},{"params":[{"type":"integer","name":"index"},{"type":"integer","name":"snap_id"}],"name":"get","return":{"type":"integer"}}],"return":{"type":"boolean"},"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"systemdesign":true,"manual":false}}
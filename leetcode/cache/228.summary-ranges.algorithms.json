{"id":228,"fid":"228","name":"汇总区间","slug":"summary-ranges","link":"https://leetcode.cn/problems/summary-ranges/description/","percent":54.684430925360104,"level":"Easy","category":"algorithms","en_name":"Summary Ranges","cn_name":"汇总区间","totalAC":"163.3K","totalSubmit":"298.5K","likes":384,"dislikes":0,"desc":"<p>给定一个 &nbsp;<strong>无重复元素</strong> 的&nbsp;<strong>有序</strong> 整数数组 <code>nums</code> 。</p>\n\n<p>返回 <em><strong>恰好覆盖数组中所有数字</strong> 的 <strong>最小有序</strong> 区间范围列表&nbsp;</em>。也就是说，<code>nums</code> 的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 <code>nums</code> 的数字 <code>x</code> 。</p>\n\n<p>列表中的每个区间范围 <code>[a,b]</code> 应该按如下格式输出：</p>\n\n<ul>\n\t<li><code>\"a-&gt;b\"</code> ，如果 <code>a != b</code></li>\n\t<li><code>\"a\"</code> ，如果 <code>a == b</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [0,1,2,4,5,7]\n<strong>输出：</strong>[\"0-&gt;2\",\"4-&gt;5\",\"7\"]\n<strong>解释：</strong>区间范围是：\n[0,2] --&gt; \"0-&gt;2\"\n[4,5] --&gt; \"4-&gt;5\"\n[7,7] --&gt; \"7\"\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [0,2,3,4,6,8,9]\n<strong>输出：</strong>[\"0\",\"2-&gt;4\",\"6\",\"8-&gt;9\"]\n<strong>解释：</strong>区间范围是：\n[0,0] --&gt; \"0\"\n[2,4] --&gt; \"2-&gt;4\"\n[6,6] --&gt; \"6\"\n[8,9] --&gt; \"8-&gt;9\"\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 20</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>nums</code> 中的所有值都 <strong>互不相同</strong></li>\n\t<li><code>nums</code> 按升序排列</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<string> summaryRanges(vector<int>& nums) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<String> summaryRanges(int[] nums) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def summaryRanges(self, nums: List[int]) -> List[str]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** summaryRanges(int* nums, int numsSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<string> SummaryRanges(int[] nums) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {string[]}\n */\nvar summaryRanges = function(nums) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function summaryRanges(nums: number[]): string[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return String[]\n     */\n    function summaryRanges($nums) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func summaryRanges(_ nums: [Int]) -> [String] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun summaryRanges(nums: IntArray): List<String> {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<String> summaryRanges(List<int> nums) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func summaryRanges(nums []int) []string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {String[]}\ndef summary_ranges(nums)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def summaryRanges(nums: Array[Int]): List[String] = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn summary_ranges(nums: Vec<i32>) -> Vec<String> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (summary-ranges nums)\n  (-> (listof exact-integer?) (listof string?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec summary_ranges(Nums :: [integer()]) -> [unicode:unicode_binary()].\nsummary_ranges(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec summary_ranges(nums :: [integer]) :: [String.t]\n  def summary_ranges(nums) do\n    \n  end\nend"}],"testcase":"[0,1,2,4,5,7]","testable":true,"templateMeta":{"name":"summaryRanges","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"list<string>"}}}
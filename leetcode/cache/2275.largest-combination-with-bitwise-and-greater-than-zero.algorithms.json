{"id":2356,"fid":"2275","name":"按位与结果大于零的最长组合","slug":"largest-combination-with-bitwise-and-greater-than-zero","link":"https://leetcode.cn/problems/largest-combination-with-bitwise-and-greater-than-zero/description/","percent":61.15279672578445,"level":"Medium","category":"algorithms","en_name":"Largest Combination With Bitwise AND Greater Than Zero","cn_name":"按位与结果大于零的最长组合","totalAC":"9.1K","totalSubmit":"14.8K","likes":44,"dislikes":0,"desc":"<p>对数组&nbsp;<code>nums</code> 执行 <strong>按位与</strong> 相当于对数组&nbsp;<code>nums</code> 中的所有整数执行 <strong>按位与</strong> 。</p>\n\n<ul>\n\t<li>例如，对 <code>nums = [1, 5, 3]</code> 来说，按位与等于 <code>1 &amp; 5 &amp; 3 = 1</code> 。</li>\n\t<li>同样，对 <code>nums = [7]</code> 而言，按位与等于 <code>7</code> 。</li>\n</ul>\n\n<p>给你一个正整数数组 <code>candidates</code> 。计算 <code>candidates</code> 中的数字每种组合下 <strong>按位与</strong> 的结果。 <code>candidates</code> 中的每个数字在每种组合中只能使用 <strong>一次</strong> 。</p>\n\n<p>返回按位与结果大于 <code>0</code> 的 <strong>最长</strong> 组合的长度<em>。</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>candidates = [16,17,71,62,12,24,14]\n<strong>输出：</strong>4\n<strong>解释：</strong>组合 [16,17,62,24] 的按位与结果是 16 &amp; 17 &amp; 62 &amp; 24 = 16 &gt; 0 。\n组合长度是 4 。\n可以证明不存在按位与结果大于 0 且长度大于 4 的组合。\n注意，符合长度最大的组合可能不止一种。\n例如，组合 [62,12,24,14] 的按位与结果是 62 &amp; 12 &amp; 24 &amp; 14 = 8 &gt; 0 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>candidates = [8,8]\n<strong>输出：</strong>2\n<strong>解释：</strong>最长组合是 [8,8] ，按位与结果 8 &amp; 8 = 8 &gt; 0 。\n组合长度是 2 ，所以返回 2 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= candidates.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= candidates[i] &lt;= 10<sup>7</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int largestCombination(vector<int>& candidates) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int largestCombination(int[] candidates) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def largestCombination(self, candidates):\n        \"\"\"\n        :type candidates: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def largestCombination(self, candidates: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"\n\nint largestCombination(int* candidates, int candidatesSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int LargestCombination(int[] candidates) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} candidates\n * @return {number}\n */\nvar largestCombination = function(candidates) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function largestCombination(candidates: number[]): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $candidates\n     * @return Integer\n     */\n    function largestCombination($candidates) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func largestCombination(_ candidates: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun largestCombination(candidates: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int largestCombination(List<int> candidates) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func largestCombination(candidates []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} candidates\n# @return {Integer}\ndef largest_combination(candidates)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def largestCombination(candidates: Array[Int]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn largest_combination(candidates: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (largest-combination candidates)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec largest_combination(Candidates :: [integer()]) -> integer().\nlargest_combination(Candidates) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec largest_combination(candidates :: [integer]) :: integer\n  def largest_combination(candidates) do\n\n  end\nend"}],"testcase":"[16,17,71,62,12,24,14]","testable":true,"templateMeta":{"name":"largestCombination","params":[{"name":"candidates","type":"integer[]"}],"return":{"type":"integer"}}}
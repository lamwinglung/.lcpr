{"id":842,"fid":"822","name":"翻转卡片游戏","slug":"card-flipping-game","link":"https://leetcode.cn/problems/card-flipping-game/description/","percent":59.54438334642577,"level":"Medium","category":"algorithms","en_name":"Card Flipping Game","cn_name":"翻转卡片游戏","totalAC":"25.8K","totalSubmit":"43.4K","likes":119,"dislikes":0,"desc":"<p>在桌子上有 <code>n</code> 张卡片，每张卡片的正面和背面都写着一个正数（正面与背面上的数有可能不一样）。</p>\n\n<p>我们可以先翻转任意张卡片，然后选择其中一张卡片。</p>\n\n<p>如果选中的那张卡片背面的数字 <code>x</code> 与任意一张卡片的正面的数字都不同，那么这个数字是我们想要的数字。</p>\n\n<p>哪个数是这些想要的数字中最小的数（找到这些数中的最小值）呢？如果没有一个数字符合要求的，输出 <code>0</code> 。</p>\n\n<p>其中, <code>fronts[i]</code>&nbsp;和&nbsp;<code>backs[i]</code>&nbsp;分别代表第&nbsp;<code>i</code>&nbsp;张卡片的正面和背面的数字。</p>\n\n<p>如果我们通过翻转卡片来交换正面与背面上的数，那么当初在正面的数就变成背面的数，背面的数就变成正面的数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\n<strong>输出：</strong><code>2</code>\n<strong>解释：</strong>假设我们翻转第二张卡片，那么在正面的数变成了 <code>[1,3,4,4,7]</code> ， 背面的数变成了 <code>[1,2,4,1,3]。</code>\n接着我们选择第二张卡片，因为现在该卡片的背面的数是 2，2 与任意卡片上正面的数都不同，所以 2 就是我们想要的数字。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>fronts = [1], backs = [1]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n无论如何翻转都无法得到想要的数字，所以返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == fronts.length == backs.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= fronts[i], backs[i] &lt;= 2000</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int flipgame(vector<int>& fronts, vector<int>& backs) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int flipgame(int[] fronts, int[] backs) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def flipgame(self, fronts, backs):\n        \"\"\"\n        :type fronts: List[int]\n        :type backs: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def flipgame(self, fronts: List[int], backs: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"int flipgame(int* fronts, int frontsSize, int* backs, int backsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int Flipgame(int[] fronts, int[] backs) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} fronts\n * @param {number[]} backs\n * @return {number}\n */\nvar flipgame = function(fronts, backs) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function flipgame(fronts: number[], backs: number[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $fronts\n     * @param Integer[] $backs\n     * @return Integer\n     */\n    function flipgame($fronts, $backs) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func flipgame(_ fronts: [Int], _ backs: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun flipgame(fronts: IntArray, backs: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int flipgame(List<int> fronts, List<int> backs) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func flipgame(fronts []int, backs []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} fronts\n# @param {Integer[]} backs\n# @return {Integer}\ndef flipgame(fronts, backs)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def flipgame(fronts: Array[Int], backs: Array[Int]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn flipgame(fronts: Vec<i32>, backs: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (flipgame fronts backs)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec flipgame(Fronts :: [integer()], Backs :: [integer()]) -> integer().\nflipgame(Fronts, Backs) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec flipgame(fronts :: [integer], backs :: [integer]) :: integer\n  def flipgame(fronts, backs) do\n    \n  end\nend"}],"testcase":"[1,2,4,4,7]\n[1,3,4,1,3]","testable":true,"templateMeta":{"name":"flipgame","params":[{"name":"fronts","type":"integer[]"},{"name":"backs","type":"integer[]"}],"return":{"type":"integer"}}}
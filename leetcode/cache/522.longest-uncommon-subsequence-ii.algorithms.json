{"id":522,"fid":"522","name":"最长特殊序列 II","slug":"longest-uncommon-subsequence-ii","link":"https://leetcode.cn/problems/longest-uncommon-subsequence-ii/description/","percent":48.86224300664404,"level":"Medium","category":"algorithms","en_name":"Longest Uncommon Subsequence II","cn_name":"最长特殊序列 II","totalAC":"43.7K","totalSubmit":"86.4K","likes":225,"dislikes":0,"desc":"<p>给定字符串列表&nbsp;<code>strs</code> ，返回其中 <strong>最长的特殊序列</strong>&nbsp;的长度。如果最长特殊序列不存在，返回 <code>-1</code> 。</p>\n\n<p><strong>特殊序列</strong> 定义如下：该序列为某字符串 <strong>独有的子序列（即不能是其他字符串的子序列）</strong>。</p>\n\n<p>&nbsp;<code>s</code>&nbsp;的&nbsp;<strong>子序列</strong>可以通过删去字符串&nbsp;<code>s</code>&nbsp;中的某些字符实现。</p>\n\n<ul>\n\t<li>例如，<code>\"abc\"</code>&nbsp;是 <code>\"aebdc\"</code>&nbsp;的子序列，因为您可以删除<code>\"a<u>e</u>b<u>d</u>c\"</code>中的下划线字符来得到 <code>\"abc\"</code>&nbsp;。<code>\"aebdc\"</code>的子序列还包括<code>\"aebdc\"</code>、 <code>\"aeb\"</code>&nbsp;和 <font color=\"#c7254e\" face=\"Menlo, Monaco, Consolas, Courier New, monospace\"><span style=\"font-size: 12.6px; background-color: rgb(249, 242, 244);\">\"\"</span></font>&nbsp;(空字符串)。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入:</strong> strs = [\"aba\",\"cdc\",\"eae\"]\n<strong>输出:</strong> 3\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> strs = [\"aaa\",\"aaa\",\"aa\"]\n<strong>输出:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= strs.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= strs[i].length &lt;= 10</code></li>\n\t<li><code>strs[i]</code>&nbsp;只包含小写英文字母</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int findLUSlength(vector<string>& strs) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findLUSlength(String[] strs) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findLUSlength(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findLUSlength(self, strs: List[str]) -> int:"},{"value":"c","text":"C","defaultCode":"int findLUSlength(char** strs, int strsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int FindLUSlength(string[] strs) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} strs\n * @return {number}\n */\nvar findLUSlength = function(strs) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findLUSlength(strs: string[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return Integer\n     */\n    function findLUSlength($strs) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findLUSlength(_ strs: [String]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findLUSlength(strs: Array<String>): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int findLUSlength(List<String> strs) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func findLUSlength(strs []string) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} strs\n# @return {Integer}\ndef find_lu_slength(strs)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findLUSlength(strs: Array[String]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_lu_slength(strs: Vec<String>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-lu-slength strs)\n  (-> (listof string?) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_lu_slength(Strs :: [unicode:unicode_binary()]) -> integer().\nfind_lu_slength(Strs) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_lu_slength(strs :: [String.t]) :: integer\n  def find_lu_slength(strs) do\n    \n  end\nend"}],"testcase":"[\"aba\",\"cdc\",\"eae\"]","testable":true,"templateMeta":{"name":"findLUSlength","params":[{"name":"strs","type":"string[]"}],"return":{"type":"integer"}}}
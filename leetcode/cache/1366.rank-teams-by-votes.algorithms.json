{"id":1483,"fid":"1366","name":"通过投票对团队排名","slug":"rank-teams-by-votes","link":"https://leetcode.cn/problems/rank-teams-by-votes/description/","percent":51.882736639240974,"level":"Medium","category":"algorithms","en_name":"Rank Teams by Votes","cn_name":"通过投票对团队排名","totalAC":"14.1K","totalSubmit":"27.2K","likes":100,"dislikes":0,"desc":"<p>现在有一个特殊的排名系统，依据参赛团队在投票人心中的次序进行排名，每个投票者都需要按从高到低的顺序对参与排名的所有团队进行排位。</p>\n\n<p>排名规则如下：</p>\n\n<ul>\n\t<li>参赛团队的排名次序依照其所获「排位第一」的票的多少决定。如果存在多个团队并列的情况，将继续考虑其「排位第二」的票的数量。以此类推，直到不再存在并列的情况。</li>\n\t<li>如果在考虑完所有投票情况后仍然出现并列现象，则根据团队字母的字母顺序进行排名。</li>\n</ul>\n\n<p>给你一个字符串数组&nbsp;<code>votes</code> 代表全体投票者给出的排位情况，请你根据上述排名规则对所有参赛团队进行排名。</p>\n\n<p>请你返回能表示按排名系统 <strong>排序后</strong> 的所有团队排名的字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>votes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]\n<strong>输出：</strong>\"ACB\"\n<strong>解释：</strong>\nA 队获得五票「排位第一」，没有其他队获得「排位第一」，所以 A 队排名第一。\nB 队获得两票「排位第二」，三票「排位第三」。\nC 队获得三票「排位第二」，两票「排位第三」。\n由于 C 队「排位第二」的票数较多，所以 C 队排第二，B 队排第三。\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>votes = [\"WXYZ\",\"XYZW\"]\n<strong>输出：</strong>\"XWYZ\"\n<strong>解释：</strong>\nX 队在并列僵局打破后成为排名第一的团队。X 队和 W 队的「排位第一」票数一样，但是 X 队有一票「排位第二」，而 W 没有获得「排位第二」。 \n</pre>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>votes = [\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"]\n<strong>输出：</strong>\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"\n<strong>解释：</strong>只有一个投票者，所以排名完全按照他的意愿。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= votes.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= votes[i].length &lt;= 26</code></li>\n\t<li><code>votes[i].length ==&nbsp;votes[j].length</code> for&nbsp;<code>0 &lt;= i, j &lt; votes.length</code></li>\n\t<li><code>votes[i][j]</code>&nbsp;是英文 <strong>大写</strong> 字母</li>\n\t<li><code>votes[i]</code>&nbsp;中的所有字母都是唯一的</li>\n\t<li><code>votes[0]</code>&nbsp;中出现的所有字母 <strong>同样也</strong> 出现在&nbsp;<code>votes[j]</code>&nbsp;中，其中&nbsp;<code>1 &lt;= j &lt; votes.length</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string rankTeams(vector<string>& votes) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String rankTeams(String[] votes) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def rankTeams(self, votes):\n        \"\"\"\n        :type votes: List[str]\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def rankTeams(self, votes: List[str]) -> str:"},{"value":"c","text":"C","defaultCode":"char* rankTeams(char** votes, int votesSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string RankTeams(string[] votes) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} votes\n * @return {string}\n */\nvar rankTeams = function(votes) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function rankTeams(votes: string[]): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[] $votes\n     * @return String\n     */\n    function rankTeams($votes) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func rankTeams(_ votes: [String]) -> String {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun rankTeams(votes: Array<String>): String {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String rankTeams(List<String> votes) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func rankTeams(votes []string) string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} votes\n# @return {String}\ndef rank_teams(votes)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def rankTeams(votes: Array[String]): String = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn rank_teams(votes: Vec<String>) -> String {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (rank-teams votes)\n  (-> (listof string?) string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec rank_teams(Votes :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\nrank_teams(Votes) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec rank_teams(votes :: [String.t]) :: String.t\n  def rank_teams(votes) do\n    \n  end\nend"}],"testcase":"[\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]","testable":true,"templateMeta":{"name":"rankTeams","params":[{"name":"votes","type":"string[]"}],"return":{"type":"string"}}}
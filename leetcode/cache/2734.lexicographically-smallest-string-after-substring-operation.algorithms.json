{"id":2828,"fid":"2734","name":"执行子串操作后的字典序最小字符串","slug":"lexicographically-smallest-string-after-substring-operation","link":"https://leetcode.cn/problems/lexicographically-smallest-string-after-substring-operation/description/","percent":34.43877551020408,"level":"Medium","category":"algorithms","en_name":"Lexicographically Smallest String After Substring Operation","cn_name":"执行子串操作后的字典序最小字符串","totalAC":"14.2K","totalSubmit":"28.5K","likes":30,"dislikes":0,"desc":"<p>给你一个仅由小写英文字母组成的字符串 <code>s</code> 。在一步操作中，你可以完成以下行为：</p>\n\n<ul>\n\t<li>选择&nbsp;<code>s</code> 的任一非空子字符串，可能是整个字符串，接着将字符串中的每一个字符替换为英文字母表中的前一个字符。例如，'b' 用 'a' 替换，'a' 用 'z' 替换。</li>\n</ul>\n\n<p>返回执行上述操作 <strong>恰好一次</strong> 后可以获得的 <strong>字典序最小</strong> 的字符串。</p>\n\n<p><strong>子字符串</strong> 是字符串中的一个连续字符序列。</p>\n现有长度相同的两个字符串 <code>x</code> 和 字符串 <code>y</code> ，在满足&nbsp;<code>x[i] != y[i]</code> 的第一个位置 <code>i</code> 上，如果&nbsp; <code>x[i]</code> 在字母表中先于 <code>y[i]</code> 出现，则认为字符串 <code>x</code> 比字符串 <code>y</code> <strong>字典序更小</strong> 。\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"cbabc\"\n<strong>输出：</strong>\"baabc\"\n<strong>解释：</strong>我们选择从下标 0 开始、到下标 1 结束的子字符串执行操作。 \n可以证明最终得到的字符串是字典序最小的。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"acbbc\"\n<strong>输出：</strong>\"abaab\"\n<strong>解释：</strong>我们选择从下标 1 开始、到下标 4 结束的子字符串执行操作。\n可以证明最终得到的字符串是字典序最小的。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"leetcode\"\n<strong>输出：</strong>\"kddsbncd\"\n<strong>解释：</strong>我们选择整个字符串执行操作。\n可以证明最终得到的字符串是字典序最小的。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> 仅由小写英文字母组成</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string smallestString(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String smallestString(String s) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def smallestString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def smallestString(self, s: str) -> str:"},{"value":"c","text":"C","defaultCode":"char * smallestString(char * s){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string SmallestString(string s) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {string}\n */\nvar smallestString = function(s) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function smallestString(s: string): string {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function smallestString($s) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func smallestString(_ s: String) -> String {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun smallestString(s: String): String {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String smallestString(String s) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func smallestString(s string) string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {String}\ndef smallest_string(s)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def smallestString(s: String): String = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn smallest_string(s: String) -> String {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (smallest-string s)\n  (-> string? string?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec smallest_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nsmallest_string(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec smallest_string(s :: String.t) :: String.t\n  def smallest_string(s) do\n\n  end\nend"}],"testcase":"\"cbabc\"","testable":true,"templateMeta":{"name":"smallestString","params":[{"name":"s","type":"string"}],"return":{"type":"string"}}}
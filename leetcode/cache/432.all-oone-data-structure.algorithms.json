{"id":432,"fid":"432","name":"全 O(1) 的数据结构","slug":"all-oone-data-structure","link":"https://leetcode.cn/problems/all-oone-data-structure/description/","percent":46.4199984710649,"level":"Hard","category":"algorithms","en_name":"All O`one Data Structure","cn_name":"全 O(1) 的数据结构","totalAC":"30.6K","totalSubmit":"66K","likes":317,"dislikes":0,"desc":"<p>请你设计一个用于存储字符串计数的数据结构，并能够返回计数最小和最大的字符串。</p>\n\n<p>实现 <code>AllOne</code> 类：</p>\n\n<ul>\n\t<li><code>AllOne()</code> 初始化数据结构的对象。</li>\n\t<li><code>inc(String key)</code> 字符串 <code>key</code> 的计数增加 <code>1</code> 。如果数据结构中尚不存在 <code>key</code> ，那么插入计数为 <code>1</code> 的 <code>key</code> 。</li>\n\t<li><code>dec(String key)</code> 字符串 <code>key</code> 的计数减少 <code>1</code> 。如果 <code>key</code> 的计数在减少后为 <code>0</code> ，那么需要将这个 <code>key</code> 从数据结构中删除。测试用例保证：在减少计数前，<code>key</code> 存在于数据结构中。</li>\n\t<li><code>getMaxKey()</code> 返回任意一个计数最大的字符串。如果没有元素存在，返回一个空字符串 <code>\"\"</code> 。</li>\n\t<li><code>getMinKey()</code> 返回任意一个计数最小的字符串。如果没有元素存在，返回一个空字符串 <code>\"\"</code> 。</li>\n</ul>\n\n<p><strong>注意：</strong>每个函数都应当满足 <code>O(1)</code> 平均时间复杂度。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入</strong>\n[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]\n<strong>输出</strong>\n[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]\n\n<strong>解释</strong>\nAllOne allOne = new AllOne();\nallOne.inc(\"hello\");\nallOne.inc(\"hello\");\nallOne.getMaxKey(); // 返回 \"hello\"\nallOne.getMinKey(); // 返回 \"hello\"\nallOne.inc(\"leet\");\nallOne.getMaxKey(); // 返回 \"hello\"\nallOne.getMinKey(); // 返回 \"leet\"\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= key.length &lt;= 10</code></li>\n\t<li><code>key</code> 由小写英文字母组成</li>\n\t<li>测试用例保证：在每次调用 <code>dec</code> 时，数据结构中总存在 <code>key</code></li>\n\t<li>最多调用 <code>inc</code>、<code>dec</code>、<code>getMaxKey</code> 和 <code>getMinKey</code> 方法 <code>5 * 10<sup>4</sup></code> 次</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class AllOne {\npublic:\n    AllOne() {\n\n    }\n    \n    void inc(string key) {\n\n    }\n    \n    void dec(string key) {\n\n    }\n    \n    string getMaxKey() {\n\n    }\n    \n    string getMinKey() {\n\n    }\n};\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne* obj = new AllOne();\n * obj->inc(key);\n * obj->dec(key);\n * string param_3 = obj->getMaxKey();\n * string param_4 = obj->getMinKey();\n */"},{"value":"java","text":"Java","defaultCode":"class AllOne {\n\n    public AllOne() {\n\n    }\n    \n    public void inc(String key) {\n\n    }\n    \n    public void dec(String key) {\n\n    }\n    \n    public String getMaxKey() {\n\n    }\n    \n    public String getMinKey() {\n\n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne obj = new AllOne();\n * obj.inc(key);\n * obj.dec(key);\n * String param_3 = obj.getMaxKey();\n * String param_4 = obj.getMinKey();\n */"},{"value":"python","text":"Python","defaultCode":"class AllOne(object):\n\n    def __init__(self):\n\n\n    def inc(self, key):\n        \"\"\"\n        :type key: str\n        :rtype: None\n        \"\"\"\n\n\n    def dec(self, key):\n        \"\"\"\n        :type key: str\n        :rtype: None\n        \"\"\"\n\n\n    def getMaxKey(self):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n\n\n    def getMinKey(self):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n\n\n\n# Your AllOne object will be instantiated and called as such:\n# obj = AllOne()\n# obj.inc(key)\n# obj.dec(key)\n# param_3 = obj.getMaxKey()\n# param_4 = obj.getMinKey()"},{"value":"python3","text":"Python3","defaultCode":"class AllOne:\n\n    def __init__(self):\n\n\n    def inc(self, key: str) -> None:\n\n\n    def dec(self, key: str) -> None:\n\n\n    def getMaxKey(self) -> str:\n\n\n    def getMinKey(self) -> str:\n\n\n\n# Your AllOne object will be instantiated and called as such:\n# obj = AllOne()\n# obj.inc(key)\n# obj.dec(key)\n# param_3 = obj.getMaxKey()\n# param_4 = obj.getMinKey()"},{"value":"c","text":"C","defaultCode":"\n\n\ntypedef struct {\n    \n} AllOne;\n\n\nAllOne* allOneCreate() {\n    \n}\n\nvoid allOneInc(AllOne* obj, char* key) {\n    \n}\n\nvoid allOneDec(AllOne* obj, char* key) {\n    \n}\n\nchar* allOneGetMaxKey(AllOne* obj) {\n    \n}\n\nchar* allOneGetMinKey(AllOne* obj) {\n    \n}\n\nvoid allOneFree(AllOne* obj) {\n    \n}\n\n/**\n * Your AllOne struct will be instantiated and called as such:\n * AllOne* obj = allOneCreate();\n * allOneInc(obj, key);\n \n * allOneDec(obj, key);\n \n * char* param_3 = allOneGetMaxKey(obj);\n \n * char* param_4 = allOneGetMinKey(obj);\n \n * allOneFree(obj);\n*/"},{"value":"csharp","text":"C#","defaultCode":"public class AllOne {\n\n    public AllOne() {\n\n    }\n    \n    public void Inc(string key) {\n\n    }\n    \n    public void Dec(string key) {\n\n    }\n    \n    public string GetMaxKey() {\n\n    }\n    \n    public string GetMinKey() {\n\n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne obj = new AllOne();\n * obj.Inc(key);\n * obj.Dec(key);\n * string param_3 = obj.GetMaxKey();\n * string param_4 = obj.GetMinKey();\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"\nvar AllOne = function() {\n\n};\n\n/** \n * @param {string} key\n * @return {void}\n */\nAllOne.prototype.inc = function(key) {\n\n};\n\n/** \n * @param {string} key\n * @return {void}\n */\nAllOne.prototype.dec = function(key) {\n\n};\n\n/**\n * @return {string}\n */\nAllOne.prototype.getMaxKey = function() {\n\n};\n\n/**\n * @return {string}\n */\nAllOne.prototype.getMinKey = function() {\n\n};\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * var obj = new AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */"},{"value":"typescript","text":"TypeScript","defaultCode":"class AllOne {\n    constructor() {\n        \n    }\n\n    inc(key: string): void {\n        \n    }\n\n    dec(key: string): void {\n        \n    }\n\n    getMaxKey(): string {\n        \n    }\n\n    getMinKey(): string {\n        \n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * var obj = new AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */"},{"value":"php","text":"PHP","defaultCode":"class AllOne {\n    /**\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * @param String $key\n     * @return NULL\n     */\n    function inc($key) {\n\n    }\n\n    /**\n     * @param String $key\n     * @return NULL\n     */\n    function dec($key) {\n\n    }\n\n    /**\n     * @return String\n     */\n    function getMaxKey() {\n\n    }\n\n    /**\n     * @return String\n     */\n    function getMinKey() {\n\n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * $obj = AllOne();\n * $obj->inc($key);\n * $obj->dec($key);\n * $ret_3 = $obj->getMaxKey();\n * $ret_4 = $obj->getMinKey();\n */"},{"value":"swift","text":"Swift","defaultCode":"\nclass AllOne {\n\n    init() {\n\n    }\n    \n    func inc(_ key: String) {\n\n    }\n    \n    func dec(_ key: String) {\n\n    }\n    \n    func getMaxKey() -> String {\n\n    }\n    \n    func getMinKey() -> String {\n\n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * let obj = AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * let ret_3: String = obj.getMaxKey()\n * let ret_4: String = obj.getMinKey()\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class AllOne() {\n\n    fun inc(key: String) {\n\n    }\n\n    fun dec(key: String) {\n\n    }\n\n    fun getMaxKey(): String {\n\n    }\n\n    fun getMinKey(): String {\n\n    }\n\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * var obj = AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * var param_3 = obj.getMaxKey()\n * var param_4 = obj.getMinKey()\n */"},{"value":"dart","text":"Dart","defaultCode":"class AllOne {\n\n  AllOne() {\n    \n  }\n  \n  void inc(String key) {\n    \n  }\n  \n  void dec(String key) {\n    \n  }\n  \n  String getMaxKey() {\n    \n  }\n  \n  String getMinKey() {\n    \n  }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * AllOne obj = AllOne();\n * obj.inc(key);\n * obj.dec(key);\n * String param3 = obj.getMaxKey();\n * String param4 = obj.getMinKey();\n */"},{"value":"golang","text":"Go","defaultCode":"type AllOne struct {\n\n}\n\n\nfunc Constructor() AllOne {\n\n}\n\n\nfunc (this *AllOne) Inc(key string)  {\n\n}\n\n\nfunc (this *AllOne) Dec(key string)  {\n\n}\n\n\nfunc (this *AllOne) GetMaxKey() string {\n\n}\n\n\nfunc (this *AllOne) GetMinKey() string {\n\n}\n\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Inc(key);\n * obj.Dec(key);\n * param_3 := obj.GetMaxKey();\n * param_4 := obj.GetMinKey();\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class AllOne\n    def initialize()\n        \n    end\n\n\n=begin\n    :type key: String\n    :rtype: Void\n=end\n    def inc(key)\n        \n    end\n\n\n=begin\n    :type key: String\n    :rtype: Void\n=end\n    def dec(key)\n        \n    end\n\n\n=begin\n    :rtype: String\n=end\n    def get_max_key()\n        \n    end\n\n\n=begin\n    :rtype: String\n=end\n    def get_min_key()\n        \n    end\n\n\nend\n\n# Your AllOne object will be instantiated and called as such:\n# obj = AllOne.new()\n# obj.inc(key)\n# obj.dec(key)\n# param_3 = obj.get_max_key()\n# param_4 = obj.get_min_key()"},{"value":"scala","text":"Scala","defaultCode":"class AllOne() {\n\n    def inc(key: String): Unit = {\n        \n    }\n\n    def dec(key: String): Unit = {\n        \n    }\n\n    def getMaxKey(): String = {\n        \n    }\n\n    def getMinKey(): String = {\n        \n    }\n\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * val obj = new AllOne()\n * obj.inc(key)\n * obj.dec(key)\n * val param_3 = obj.getMaxKey()\n * val param_4 = obj.getMinKey()\n */"},{"value":"rust","text":"Rust","defaultCode":"struct AllOne {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl AllOne {\n\n    fn new() -> Self {\n\n    }\n    \n    fn inc(&self, key: String) {\n\n    }\n    \n    fn dec(&self, key: String) {\n\n    }\n    \n    fn get_max_key(&self) -> String {\n\n    }\n    \n    fn get_min_key(&self) -> String {\n\n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * let obj = AllOne::new();\n * obj.inc(key);\n * obj.dec(key);\n * let ret_3: String = obj.get_max_key();\n * let ret_4: String = obj.get_min_key();\n */"},{"value":"racket","text":"Racket","defaultCode":"(define all-one%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; inc : string? -> void?\n    (define/public (inc key)\n      )\n    ; dec : string? -> void?\n    (define/public (dec key)\n      )\n    ; get-max-key : -> string?\n    (define/public (get-max-key)\n      )\n    ; get-min-key : -> string?\n    (define/public (get-min-key)\n      )))\n\n;; Your all-one% object will be instantiated and called as such:\n;; (define obj (new all-one%))\n;; (send obj inc key)\n;; (send obj dec key)\n;; (define param_3 (send obj get-max-key))\n;; (define param_4 (send obj get-min-key))"},{"value":"erlang","text":"Erlang","defaultCode":"-spec all_one_init_() -> any().\nall_one_init_() ->\n  .\n\n-spec all_one_inc(Key :: unicode:unicode_binary()) -> any().\nall_one_inc(Key) ->\n  .\n\n-spec all_one_dec(Key :: unicode:unicode_binary()) -> any().\nall_one_dec(Key) ->\n  .\n\n-spec all_one_get_max_key() -> unicode:unicode_binary().\nall_one_get_max_key() ->\n  .\n\n-spec all_one_get_min_key() -> unicode:unicode_binary().\nall_one_get_min_key() ->\n  .\n\n\n%% Your functions will be called as such:\n%% all_one_init_(),\n%% all_one_inc(Key),\n%% all_one_dec(Key),\n%% Param_3 = all_one_get_max_key(),\n%% Param_4 = all_one_get_min_key(),\n\n%% all_one_init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule AllOne do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec inc(key :: String.t) :: any\n  def inc(key) do\n    \n  end\n\n  @spec dec(key :: String.t) :: any\n  def dec(key) do\n    \n  end\n\n  @spec get_max_key() :: String.t\n  def get_max_key() do\n    \n  end\n\n  @spec get_min_key() :: String.t\n  def get_min_key() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# AllOne.init_()\n# AllOne.inc(key)\n# AllOne.dec(key)\n# param_3 = AllOne.get_max_key()\n# param_4 = AllOne.get_min_key()\n\n# AllOne.init_ will be called before every test case, in which you can do some necessary initializations."}],"testcase":"[\"AllOne\",\"inc\",\"inc\",\"getMaxKey\",\"getMinKey\",\"inc\",\"getMaxKey\",\"getMinKey\"]\n[[],[\"hello\"],[\"hello\"],[],[],[\"leet\"],[],[]]","testable":true,"templateMeta":{"classname":"AllOne","constructor":{"params":[]},"methods":[{"params":[{"type":"string","name":"key"}],"return":{"type":"void"},"name":"inc"},{"params":[{"type":"string","name":"key"}],"return":{"type":"void"},"name":"dec"},{"params":[],"return":{"type":"string"},"name":"getMaxKey"},{"params":[],"return":{"type":"string"},"name":"getMinKey"}],"return":{"type":"boolean"},"systemdesign":true}}
{"id":289,"fid":"289","name":"生命游戏","slug":"game-of-life","link":"https://leetcode.cn/problems/game-of-life/description/","percent":76.09217305384995,"level":"Medium","category":"algorithms","en_name":"Game of Life","cn_name":"生命游戏","totalAC":"110.1K","totalSubmit":"144.6K","likes":608,"dislikes":0,"desc":"<p>根据&nbsp;<a href=\"https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin\" target=\"_blank\">百度百科</a>&nbsp;，&nbsp;<strong>生命游戏</strong>&nbsp;，简称为 <strong>生命</strong> ，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。</p>\n\n<p>给定一个包含 <code>m × n</code>&nbsp;个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态： <code>1</code> 即为 <strong>活细胞</strong> （live），或 <code>0</code> 即为 <strong>死细胞</strong> （dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：</p>\n\n<ol>\n\t<li>如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；</li>\n\t<li>如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；</li>\n\t<li>如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；</li>\n\t<li>如果死细胞周围正好有三个活细胞，则该位置死细胞复活；</li>\n</ol>\n\n<p>下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。给你 <code>m x n</code> 网格面板 <code>board</code> 的当前状态，返回下一个状态。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/26/grid1.jpg\" />\n<pre>\n<strong>输入：</strong>board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\n<strong>输出：</strong>[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/26/grid2.jpg\" />\n<pre>\n<strong>输入：</strong>board = [[1,1],[1,0]]\n<strong>输出：</strong>[[1,1],[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 25</code></li>\n\t<li><code>board[i][j]</code> 为 <code>0</code> 或 <code>1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong></p>\n\n<ul>\n\t<li>你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。</li>\n\t<li>本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    void gameOfLife(vector<vector<int>>& board) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public void gameOfLife(int[][] board) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def gameOfLife(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def gameOfLife(self, board: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\""},{"value":"c","text":"C","defaultCode":"void gameOfLife(int** board, int boardSize, int* boardColSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public void GameOfLife(int[][] board) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar gameOfLife = function(board) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"/**\n Do not return anything, modify board in-place instead.\n */\nfunction gameOfLife(board: number[][]): void {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $board\n     * @return NULL\n     */\n    function gameOfLife(&$board) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func gameOfLife(_ board: inout [[Int]]) {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun gameOfLife(board: Array<IntArray>): Unit {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  void gameOfLife(List<List<int>> board) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func gameOfLife(board [][]int)  {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} board\n# @return {Void} Do not return anything, modify board in-place instead.\ndef game_of_life(board)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def gameOfLife(board: Array[Array[Int]]): Unit = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn game_of_life(board: &mut Vec<Vec<i32>>) {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (game-of-life board)\n  (-> (listof (listof exact-integer?)) void?)\n\n  )"}],"testcase":"[[0,1,0],[0,0,1],[1,1,1],[0,0,0]]","testable":true,"templateMeta":{"name":"gameOfLife","params":[{"name":"board","type":"integer[][]"}],"return":{"type":"void"},"output":{"paramindex":0}}}
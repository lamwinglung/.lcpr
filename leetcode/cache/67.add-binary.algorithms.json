{"id":67,"fid":"67","name":"二进制求和","slug":"add-binary","link":"https://leetcode.cn/problems/add-binary/description/","percent":53.0524651040401,"level":"Easy","category":"algorithms","en_name":"Add Binary","cn_name":"二进制求和","totalAC":"395.5K","totalSubmit":"745.5K","likes":1194,"dislikes":0,"desc":"<p>给你两个二进制字符串 <code>a</code> 和 <code>b</code> ，以二进制字符串的形式返回它们的和。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1：</strong></p>\n\n<pre>\n<strong>输入:</strong>a = \"11\", b = \"1\"\n<strong>输出：</strong>\"100\"</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre>\n<strong>输入：</strong>a = \"1010\", b = \"1011\"\n<strong>输出：</strong>\"10101\"</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>a</code> 和 <code>b</code> 仅由字符 <code>'0'</code> 或 <code>'1'</code> 组成</li>\n\t<li>字符串如果不是 <code>\"0\"</code> ，就不含前导零</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string addBinary(string a, string b) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String addBinary(String a, String b) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def addBinary(self, a: str, b: str) -> str:"},{"value":"c","text":"C","defaultCode":"char* addBinary(char* a, char* b) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string AddBinary(string a, string b) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\nvar addBinary = function(a, b) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function addBinary(a: string, b: string): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return String\n     */\n    function addBinary($a, $b) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func addBinary(_ a: String, _ b: String) -> String {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun addBinary(a: String, b: String): String {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String addBinary(String a, String b) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func addBinary(a string, b string) string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} a\n# @param {String} b\n# @return {String}\ndef add_binary(a, b)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def addBinary(a: String, b: String): String = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn add_binary(a: String, b: String) -> String {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (add-binary a b)\n  (-> string? string? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec add_binary(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> unicode:unicode_binary().\nadd_binary(A, B) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec add_binary(a :: String.t, b :: String.t) :: String.t\n  def add_binary(a, b) do\n    \n  end\nend"}],"testcase":"\"11\"\n\"1\"","testable":true,"templateMeta":{"name":"addBinary","params":[{"name":"a","type":"string"},{"name":"b","type":"string"}],"return":{"type":"string"}}}
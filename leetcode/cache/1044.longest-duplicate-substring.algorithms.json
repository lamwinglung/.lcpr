{"id":1122,"fid":"1044","name":"最长重复子串","slug":"longest-duplicate-substring","link":"https://leetcode.cn/problems/longest-duplicate-substring/description/","percent":35.298684639879376,"level":"Hard","category":"algorithms","en_name":"Longest Duplicate Substring","cn_name":"最长重复子串","totalAC":"31.6K","totalSubmit":"89.7K","likes":404,"dislikes":0,"desc":"<p>给你一个字符串 <code>s</code> ，考虑其所有 <em>重复子串</em> ：即&nbsp;<code>s</code> 的（连续）子串，在 <code>s</code> 中出现 2 次或更多次。这些出现之间可能存在重叠。</p>\n\n<p>返回 <strong>任意一个</strong> 可能具有最长长度的重复子串。如果 <code>s</code> 不含重复子串，那么答案为 <code>\"\"</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"banana\"\n<strong>输出：</strong>\"ana\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"abcd\"\n<strong>输出：</strong>\"\"\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> 由小写英文字母组成</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string longestDupSubstring(string s) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String longestDupSubstring(String s) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def longestDupSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def longestDupSubstring(self, s: str) -> str:"},{"value":"c","text":"C","defaultCode":"char* longestDupSubstring(char* s) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string LongestDupSubstring(string s) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {string}\n */\nvar longestDupSubstring = function(s) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function longestDupSubstring(s: string): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function longestDupSubstring($s) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func longestDupSubstring(_ s: String) -> String {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun longestDupSubstring(s: String): String {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String longestDupSubstring(String s) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func longestDupSubstring(s string) string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {String}\ndef longest_dup_substring(s)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def longestDupSubstring(s: String): String = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn longest_dup_substring(s: String) -> String {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (longest-dup-substring s)\n  (-> string? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec longest_dup_substring(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nlongest_dup_substring(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec longest_dup_substring(s :: String.t) :: String.t\n  def longest_dup_substring(s) do\n    \n  end\nend"}],"testcase":"\"banana\"","testable":true,"templateMeta":{"name":"longestDupSubstring","params":[{"name":"s","type":"string"}],"return":{"type":"string"}}}
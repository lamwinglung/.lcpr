{"id":2831,"fid":"2748","name":"美丽下标对的数目","slug":"number-of-beautiful-pairs","link":"https://leetcode.cn/problems/number-of-beautiful-pairs/description/","percent":57.9734219269103,"level":"Easy","category":"algorithms","en_name":"Number of Beautiful Pairs","cn_name":"美丽下标对的数目","totalAC":"15.5K","totalSubmit":"24.1K","likes":29,"dislikes":0,"desc":"<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。如果下标对 <code>i</code>、<code>j</code> 满足 <code>0 ≤ i &lt; j &lt; nums.length</code> ，如果&nbsp;<code>nums[i]</code> 的 <strong>第一个数字</strong> 和 <code>nums[j]</code> 的 <strong>最后一个数字</strong> <strong>互质</strong> ，则认为 <code>nums[i]</code> 和 <code>nums[j]</code> 是一组 <strong>美丽下标对</strong> 。</p>\n\n<p>返回 <code>nums</code> 中 <strong>美丽下标对</strong> 的总数目。</p>\n\n<p>对于两个整数 <code>x</code> 和 <code>y</code> ，如果不存在大于 1 的整数可以整除它们，则认为 <code>x</code> 和 <code>y</code> <strong>互质</strong> 。换而言之，如果 <code>gcd(x, y) == 1</code> ，则认为 <code>x</code> 和 <code>y</code> 互质，其中 <code>gcd(x, y)</code> 是 <code>x</code> 和 <code>y</code>&nbsp;的&nbsp;<strong>最大公因数</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,5,1,4]\n<strong>输出：</strong>5\n<strong>解释：</strong>nums 中共有 5 组美丽下标对：\ni = 0 和 j = 1 ：nums[0] 的第一个数字是 2 ，nums[1] 的最后一个数字是 5 。2 和 5 互质，因此 gcd(2,5) == 1 。\ni = 0 和 j = 2 ：nums[0] 的第一个数字是 2 ，nums[2] 的最后一个数字是 1 。2 和 5 互质，因此 gcd(2,1) == 1 。\ni = 1 和 j = 2 ：nums[1] 的第一个数字是 5 ，nums[2] 的最后一个数字是 1 。2 和 5 互质，因此 gcd(5,1) == 1 。\ni = 1 和 j = 3 ：nums[1] 的第一个数字是 5 ，nums[3] 的最后一个数字是 4 。2 和 5 互质，因此 gcd(5,4) == 1 。\ni = 2 和 j = 3 ：nums[2] 的第一个数字是 1 ，nums[3] 的最后一个数字是 4 。2 和 5 互质，因此 gcd(1,4) == 1 。\n因此，返回 5 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [11,21,12]\n<strong>输出：</strong>2\n<strong>解释：</strong>共有 2 组美丽下标对：\ni = 0 和 j = 1 ：nums[0] 的第一个数字是 1 ，nums[1] 的最后一个数字是 1 。gcd(1,1) == 1 。\ni = 0 和 j = 2 ：nums[0] 的第一个数字是 1 ，nums[2] 的最后一个数字是 2 。gcd(1,2) == 1 。\n因此，返回 2 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 9999</code></li>\n\t<li><code>nums[i] % 10 != 0</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int countBeautifulPairs(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int countBeautifulPairs(int[] nums) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def countBeautifulPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def countBeautifulPairs(self, nums: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"int countBeautifulPairs(int* nums, int numsSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int CountBeautifulPairs(int[] nums) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countBeautifulPairs = function(nums) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function countBeautifulPairs(nums: number[]): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countBeautifulPairs($nums) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func countBeautifulPairs(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun countBeautifulPairs(nums: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int countBeautifulPairs(List<int> nums) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func countBeautifulPairs(nums []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer}\ndef count_beautiful_pairs(nums)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def countBeautifulPairs(nums: Array[Int]): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn count_beautiful_pairs(nums: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (count-beautiful-pairs nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec count_beautiful_pairs(Nums :: [integer()]) -> integer().\ncount_beautiful_pairs(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec count_beautiful_pairs(nums :: [integer]) :: integer\n  def count_beautiful_pairs(nums) do\n\n  end\nend"}],"testcase":"[2,5,1,4]","testable":true,"templateMeta":{"name":"countBeautifulPairs","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}
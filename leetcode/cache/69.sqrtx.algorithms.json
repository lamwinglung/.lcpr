{"id":69,"fid":"69","name":"x 的平方根 ","slug":"sqrtx","link":"https://leetcode.cn/problems/sqrtx/description/","percent":38.525468779005955,"level":"Easy","category":"algorithms","en_name":"Sqrt(x)","cn_name":"x 的平方根 ","totalAC":"901.4K","totalSubmit":"2.3M","likes":1541,"dislikes":0,"desc":"<p>给你一个非负整数 <code>x</code> ，计算并返回&nbsp;<code>x</code>&nbsp;的 <strong>算术平方根</strong> 。</p>\n\n<p>由于返回类型是整数，结果只保留 <strong>整数部分 </strong>，小数部分将被 <strong>舍去 。</strong></p>\n\n<p><strong>注意：</strong>不允许使用任何内置指数函数和算符，例如 <code>pow(x, 0.5)</code> 或者 <code>x ** 0.5</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 4\n<strong>输出：</strong>2\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 8\n<strong>输出：</strong>2\n<strong>解释：</strong>8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int mySqrt(int x) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int mySqrt(int x) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def mySqrt(self, x: int) -> int:"},{"value":"c","text":"C","defaultCode":"int mySqrt(int x) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MySqrt(int x) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} x\n * @return {number}\n */\nvar mySqrt = function(x) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function mySqrt(x: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function mySqrt($x) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func mySqrt(_ x: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun mySqrt(x: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int mySqrt(int x) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func mySqrt(x int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} x\n# @return {Integer}\ndef my_sqrt(x)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def mySqrt(x: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn my_sqrt(x: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (my-sqrt x)\n  (-> exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec my_sqrt(X :: integer()) -> integer().\nmy_sqrt(X) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec my_sqrt(x :: integer) :: integer\n  def my_sqrt(x) do\n    \n  end\nend"}],"testcase":"4","testable":true,"templateMeta":{"name":"mySqrt","params":[{"name":"x","type":"integer"}],"return":{"type":"integer"}}}
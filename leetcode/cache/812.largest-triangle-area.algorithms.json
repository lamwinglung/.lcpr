{"id":830,"fid":"812","name":"最大三角形面积","slug":"largest-triangle-area","link":"https://leetcode.cn/problems/largest-triangle-area/description/","percent":68.08701347950495,"level":"Easy","category":"algorithms","en_name":"Largest Triangle Area","cn_name":"最大三角形面积","totalAC":"39.7K","totalSubmit":"58.3K","likes":199,"dislikes":0,"desc":"<p>给你一个由 <strong>X-Y</strong> 平面上的点组成的数组 <code>points</code> ，其中 <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> 。从其中取任意三个不同的点组成三角形，返回能组成的最大三角形的面积。与真实值误差在 <code>10<sup>-5</sup></code> 内的答案将会视为正确答案<strong>。</strong></p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/04/1027.png\" style=\"height: 369px; width: 450px;\" />\n<pre>\n<strong>输入：</strong>points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\n<strong>输出：</strong>2.00000\n<strong>解释：</strong>输入中的 5 个点如上图所示，红色的三角形面积最大。\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>points = [[1,0],[0,0],[0,1]]\n<strong>输出：</strong>0.50000\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= points.length &lt;= 50</code></li>\n\t<li><code>-50 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 50</code></li>\n\t<li>给出的所有点 <strong>互不相同</strong></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    double largestTriangleArea(vector<vector<int>>& points) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public double largestTriangleArea(int[][] points) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def largestTriangleArea(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: float\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def largestTriangleArea(self, points: List[List[int]]) -> float:"},{"value":"c","text":"C","defaultCode":"double largestTriangleArea(int** points, int pointsSize, int* pointsColSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public double LargestTriangleArea(int[][] points) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} points\n * @return {number}\n */\nvar largestTriangleArea = function(points) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function largestTriangleArea(points: number[][]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Float\n     */\n    function largestTriangleArea($points) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func largestTriangleArea(_ points: [[Int]]) -> Double {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun largestTriangleArea(points: Array<IntArray>): Double {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  double largestTriangleArea(List<List<int>> points) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func largestTriangleArea(points [][]int) float64 {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} points\n# @return {Float}\ndef largest_triangle_area(points)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def largestTriangleArea(points: Array[Array[Int]]): Double = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn largest_triangle_area(points: Vec<Vec<i32>>) -> f64 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (largest-triangle-area points)\n  (-> (listof (listof exact-integer?)) flonum?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec largest_triangle_area(Points :: [[integer()]]) -> float().\nlargest_triangle_area(Points) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec largest_triangle_area(points :: [[integer]]) :: float\n  def largest_triangle_area(points) do\n    \n  end\nend"}],"testcase":"[[0,0],[0,1],[1,0],[0,2],[2,0]]","testable":true,"templateMeta":{"name":"largestTriangleArea","params":[{"name":"points","type":"integer[][]"}],"return":{"type":"double"}}}
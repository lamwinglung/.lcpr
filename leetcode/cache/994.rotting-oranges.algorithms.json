{"id":1036,"fid":"994","name":"腐烂的橘子","slug":"rotting-oranges","link":"https://leetcode.cn/problems/rotting-oranges/description/","percent":51.34167662720348,"level":"Medium","category":"algorithms","en_name":"Rotting Oranges","cn_name":"腐烂的橘子","totalAC":"173.4K","totalSubmit":"335.2K","likes":858,"dislikes":0,"desc":"<p>在给定的&nbsp;<code>m x n</code>&nbsp;网格<meta charset=\"UTF-8\" />&nbsp;<code>grid</code>&nbsp;中，每个单元格可以有以下三个值之一：</p>\n\n<ul>\n\t<li>值&nbsp;<code>0</code>&nbsp;代表空单元格；</li>\n\t<li>值&nbsp;<code>1</code>&nbsp;代表新鲜橘子；</li>\n\t<li>值&nbsp;<code>2</code>&nbsp;代表腐烂的橘子。</li>\n</ul>\n\n<p>每分钟，腐烂的橘子&nbsp;<strong>周围&nbsp;4 个方向上相邻</strong> 的新鲜橘子都会腐烂。</p>\n\n<p>返回 <em>直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回&nbsp;<code>-1</code></em>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/oranges.png\" style=\"height: 137px; width: 650px;\" /></strong></p>\n\n<pre>\n<strong>输入：</strong>grid = [[2,1,1],[1,1,0],[0,1,1]]\n<strong>输出：</strong>4\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>grid = [[2,1,1],[0,1,1],[1,0,1]]\n<strong>输出：</strong>-1\n<strong>解释：</strong>左下角的橘子（第 2 行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个方向上。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>grid = [[0,2]]\n<strong>输出：</strong>0\n<strong>解释：</strong>因为 0 分钟时已经没有新鲜橘子了，所以答案就是 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10</code></li>\n\t<li><code>grid[i][j]</code> 仅为&nbsp;<code>0</code>、<code>1</code>&nbsp;或&nbsp;<code>2</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int orangesRotting(vector<vector<int>>& grid) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int orangesRotting(int[][] grid) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def orangesRotting(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def orangesRotting(self, grid: List[List[int]]) -> int:"},{"value":"c","text":"C","defaultCode":"int orangesRotting(int** grid, int gridSize, int* gridColSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int OrangesRotting(int[][] grid) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar orangesRotting = function(grid) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function orangesRotting(grid: number[][]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function orangesRotting($grid) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func orangesRotting(_ grid: [[Int]]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun orangesRotting(grid: Array<IntArray>): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int orangesRotting(List<List<int>> grid) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func orangesRotting(grid [][]int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\n# @return {Integer}\ndef oranges_rotting(grid)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def orangesRotting(grid: Array[Array[Int]]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn oranges_rotting(grid: Vec<Vec<i32>>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (oranges-rotting grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec oranges_rotting(Grid :: [[integer()]]) -> integer().\noranges_rotting(Grid) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec oranges_rotting(grid :: [[integer]]) :: integer\n  def oranges_rotting(grid) do\n    \n  end\nend"}],"testcase":"[[2,1,1],[1,1,0],[0,1,1]]","testable":true,"templateMeta":{"name":"orangesRotting","params":[{"name":"grid","type":"integer[][]"}],"return":{"type":"integer"}}}